
Autonomous_380_bot_F051.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08005080  08005080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050cc  080050cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080050cc  080050cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050cc  080050cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000000c  080050e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080050e0  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013944  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c03  00000000  00000000  00033978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00036580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00037670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013420  00000000  00000000  00038618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016acd  00000000  00000000  0004ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000719f4  00000000  00000000  00062505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c0c  00000000  00000000  000d3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005068 	.word	0x08005068

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005068 	.word	0x08005068

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f004 ff12 	bl	8005058 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000234:	4b39      	ldr	r3, [pc, #228]	; (800031c <MX_ADC_Init+0xfc>)
 8000236:	4a3a      	ldr	r2, [pc, #232]	; (8000320 <MX_ADC_Init+0x100>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b38      	ldr	r3, [pc, #224]	; (800031c <MX_ADC_Init+0xfc>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b36      	ldr	r3, [pc, #216]	; (800031c <MX_ADC_Init+0xfc>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b35      	ldr	r3, [pc, #212]	; (800031c <MX_ADC_Init+0xfc>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b33      	ldr	r3, [pc, #204]	; (800031c <MX_ADC_Init+0xfc>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000252:	4b32      	ldr	r3, [pc, #200]	; (800031c <MX_ADC_Init+0xfc>)
 8000254:	2208      	movs	r2, #8
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b30      	ldr	r3, [pc, #192]	; (800031c <MX_ADC_Init+0xfc>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <MX_ADC_Init+0xfc>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b2d      	ldr	r3, [pc, #180]	; (800031c <MX_ADC_Init+0xfc>)
 8000266:	2201      	movs	r2, #1
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b2c      	ldr	r3, [pc, #176]	; (800031c <MX_ADC_Init+0xfc>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b2a      	ldr	r3, [pc, #168]	; (800031c <MX_ADC_Init+0xfc>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b28      	ldr	r3, [pc, #160]	; (800031c <MX_ADC_Init+0xfc>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800027e:	4b27      	ldr	r3, [pc, #156]	; (800031c <MX_ADC_Init+0xfc>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2101      	movs	r1, #1
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <MX_ADC_Init+0xfc>)
 8000288:	2200      	movs	r2, #0
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b23      	ldr	r3, [pc, #140]	; (800031c <MX_ADC_Init+0xfc>)
 800028e:	0018      	movs	r0, r3
 8000290:	f001 fcc4 	bl	8001c1c <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 fd42 	bl	8000d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2207      	movs	r2, #7
 80002ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4b1a      	ldr	r3, [pc, #104]	; (800031c <MX_ADC_Init+0xfc>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fe82 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 fd2e 	bl	8000d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2201      	movs	r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ca:	1d3a      	adds	r2, r7, #4
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <MX_ADC_Init+0xfc>)
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fe75 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80002da:	f000 fd21 	bl	8000d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2204      	movs	r2, #4
 80002e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002e4:	1d3a      	adds	r2, r7, #4
 80002e6:	4b0d      	ldr	r3, [pc, #52]	; (800031c <MX_ADC_Init+0xfc>)
 80002e8:	0011      	movs	r1, r2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fe68 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80002f4:	f000 fd14 	bl	8000d20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2205      	movs	r2, #5
 80002fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002fe:	1d3a      	adds	r2, r7, #4
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_ADC_Init+0xfc>)
 8000302:	0011      	movs	r1, r2
 8000304:	0018      	movs	r0, r3
 8000306:	f001 fe5b 	bl	8001fc0 <HAL_ADC_ConfigChannel>
 800030a:	1e03      	subs	r3, r0, #0
 800030c:	d001      	beq.n	8000312 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800030e:	f000 fd07 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	20000110 	.word	0x20000110
 8000320:	40012400 	.word	0x40012400

08000324 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b08b      	sub	sp, #44	; 0x2c
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	2414      	movs	r4, #20
 800032e:	193b      	adds	r3, r7, r4
 8000330:	0018      	movs	r0, r3
 8000332:	2314      	movs	r3, #20
 8000334:	001a      	movs	r2, r3
 8000336:	2100      	movs	r1, #0
 8000338:	f004 fe8e 	bl	8005058 <memset>
  if(adcHandle->Instance==ADC1)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a2d      	ldr	r2, [pc, #180]	; (80003f8 <HAL_ADC_MspInit+0xd4>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d153      	bne.n	80003ee <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0089      	lsls	r1, r1, #2
 8000350:	430a      	orrs	r2, r1
 8000352:	619a      	str	r2, [r3, #24]
 8000354:	4b29      	ldr	r3, [pc, #164]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 8000356:	699a      	ldr	r2, [r3, #24]
 8000358:	2380      	movs	r3, #128	; 0x80
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	4013      	ands	r3, r2
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	4b26      	ldr	r3, [pc, #152]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	4b25      	ldr	r3, [pc, #148]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	0289      	lsls	r1, r1, #10
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	4b22      	ldr	r3, [pc, #136]	; (80003fc <HAL_ADC_MspInit+0xd8>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	029b      	lsls	r3, r3, #10
 8000378:	4013      	ands	r3, r2
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800037e:	193b      	adds	r3, r7, r4
 8000380:	2233      	movs	r2, #51	; 0x33
 8000382:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000384:	193b      	adds	r3, r7, r4
 8000386:	2203      	movs	r2, #3
 8000388:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	193a      	adds	r2, r7, r4
 8000392:	2390      	movs	r3, #144	; 0x90
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fa9d 	bl	80028d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003a0:	4a18      	ldr	r2, [pc, #96]	; (8000404 <HAL_ADC_MspInit+0xe0>)
 80003a2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	00d2      	lsls	r2, r2, #3
 80003c4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003c8:	2220      	movs	r2, #32
 80003ca:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f002 f8e7 	bl	80025a8 <HAL_DMA_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80003de:	f000 fc9f 	bl	8000d20 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a06      	ldr	r2, [pc, #24]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003e6:	631a      	str	r2, [r3, #48]	; 0x30
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <HAL_ADC_MspInit+0xdc>)
 80003ea:	687a      	ldr	r2, [r7, #4]
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b00b      	add	sp, #44	; 0x2c
 80003f4:	bd90      	pop	{r4, r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40012400 	.word	0x40012400
 80003fc:	40021000 	.word	0x40021000
 8000400:	200000cc 	.word	0x200000cc
 8000404:	40020008 	.word	0x40020008

08000408 <ADC_ConfigDMA>:
}

/* USER CODE BEGIN 1 */
/* configure DMA to store ADC data */
void ADC_ConfigDMA(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  HAL_ADC_Start_DMA(&hadc, (uint32_t*) (adc_dmaBuffer), (ADC_RAW_BUFFER_LENGTH));
 800040c:	4904      	ldr	r1, [pc, #16]	; (8000420 <ADC_ConfigDMA+0x18>)
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <ADC_ConfigDMA+0x1c>)
 8000410:	2220      	movs	r2, #32
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fd42 	bl	8001e9c <HAL_ADC_Start_DMA>
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	2000002c 	.word	0x2000002c
 8000424:	20000110 	.word	0x20000110

08000428 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint16_t i,j;

	for (i = 0; i < ADC_RAW_BUFFER_LENGTH; i++)
 8000430:	230e      	movs	r3, #14
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	2200      	movs	r2, #0
 8000436:	801a      	strh	r2, [r3, #0]
 8000438:	e00f      	b.n	800045a <HAL_ADC_ConvCpltCallback+0x32>
	{
		adc_workingBuffer[i] = adc_dmaBuffer[i];
 800043a:	200e      	movs	r0, #14
 800043c:	183b      	adds	r3, r7, r0
 800043e:	8819      	ldrh	r1, [r3, #0]
 8000440:	183b      	adds	r3, r7, r0
 8000442:	881a      	ldrh	r2, [r3, #0]
 8000444:	4b38      	ldr	r3, [pc, #224]	; (8000528 <HAL_ADC_ConvCpltCallback+0x100>)
 8000446:	0049      	lsls	r1, r1, #1
 8000448:	5ac9      	ldrh	r1, [r1, r3]
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <HAL_ADC_ConvCpltCallback+0x104>)
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < ADC_RAW_BUFFER_LENGTH; i++)
 8000450:	183b      	adds	r3, r7, r0
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	183b      	adds	r3, r7, r0
 8000456:	3201      	adds	r2, #1
 8000458:	801a      	strh	r2, [r3, #0]
 800045a:	230e      	movs	r3, #14
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	2b1f      	cmp	r3, #31
 8000462:	d9ea      	bls.n	800043a <HAL_ADC_ConvCpltCallback+0x12>
	}

	for (j = 0; j < ADC_SAMPLES_PER_CHANNEL; j++)
 8000464:	230c      	movs	r3, #12
 8000466:	18fb      	adds	r3, r7, r3
 8000468:	2200      	movs	r2, #0
 800046a:	801a      	strh	r2, [r3, #0]
 800046c:	e02b      	b.n	80004c6 <HAL_ADC_ConvCpltCallback+0x9e>
	{
		for (i = 0; i < ADC_MAX_CHANNELS; i++)
 800046e:	230e      	movs	r3, #14
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
 8000476:	e01b      	b.n	80004b0 <HAL_ADC_ConvCpltCallback+0x88>
		{
			adc_avgBuffer[i] += adc_workingBuffer[i + (j * ADC_MAX_CHANNELS)];
 8000478:	200e      	movs	r0, #14
 800047a:	183b      	adds	r3, r7, r0
 800047c:	881a      	ldrh	r2, [r3, #0]
 800047e:	4b2c      	ldr	r3, [pc, #176]	; (8000530 <HAL_ADC_ConvCpltCallback+0x108>)
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	58d3      	ldr	r3, [r2, r3]
 8000484:	183a      	adds	r2, r7, r0
 8000486:	8811      	ldrh	r1, [r2, #0]
 8000488:	220c      	movs	r2, #12
 800048a:	18ba      	adds	r2, r7, r2
 800048c:	8812      	ldrh	r2, [r2, #0]
 800048e:	0092      	lsls	r2, r2, #2
 8000490:	1889      	adds	r1, r1, r2
 8000492:	4a26      	ldr	r2, [pc, #152]	; (800052c <HAL_ADC_ConvCpltCallback+0x104>)
 8000494:	0049      	lsls	r1, r1, #1
 8000496:	5a8a      	ldrh	r2, [r1, r2]
 8000498:	0011      	movs	r1, r2
 800049a:	183a      	adds	r2, r7, r0
 800049c:	8812      	ldrh	r2, [r2, #0]
 800049e:	1859      	adds	r1, r3, r1
 80004a0:	4b23      	ldr	r3, [pc, #140]	; (8000530 <HAL_ADC_ConvCpltCallback+0x108>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	50d1      	str	r1, [r2, r3]
		for (i = 0; i < ADC_MAX_CHANNELS; i++)
 80004a6:	183b      	adds	r3, r7, r0
 80004a8:	881a      	ldrh	r2, [r3, #0]
 80004aa:	183b      	adds	r3, r7, r0
 80004ac:	3201      	adds	r2, #1
 80004ae:	801a      	strh	r2, [r3, #0]
 80004b0:	230e      	movs	r3, #14
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d9de      	bls.n	8000478 <HAL_ADC_ConvCpltCallback+0x50>
	for (j = 0; j < ADC_SAMPLES_PER_CHANNEL; j++)
 80004ba:	210c      	movs	r1, #12
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	881a      	ldrh	r2, [r3, #0]
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	3201      	adds	r2, #1
 80004c4:	801a      	strh	r2, [r3, #0]
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d9ce      	bls.n	800046e <HAL_ADC_ConvCpltCallback+0x46>
		}
	}

	for (i = 0; i < ADC_MAX_CHANNELS; i++)
 80004d0:	230e      	movs	r3, #14
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	2200      	movs	r2, #0
 80004d6:	801a      	strh	r2, [r3, #0]
 80004d8:	e01c      	b.n	8000514 <HAL_ADC_ConvCpltCallback+0xec>
	{
		g_adcBuffer[i] = (adc_avgBuffer[i] / ADC_SAMPLES_PER_CHANNEL);
 80004da:	200e      	movs	r0, #14
 80004dc:	183b      	adds	r3, r7, r0
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	4b13      	ldr	r3, [pc, #76]	; (8000530 <HAL_ADC_ConvCpltCallback+0x108>)
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	58d3      	ldr	r3, [r2, r3]
 80004e6:	183a      	adds	r2, r7, r0
 80004e8:	8812      	ldrh	r2, [r2, #0]
 80004ea:	08d9      	lsrs	r1, r3, #3
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <HAL_ADC_ConvCpltCallback+0x10c>)
 80004ee:	0092      	lsls	r2, r2, #2
 80004f0:	50d1      	str	r1, [r2, r3]
		adc_avgBuffer[i] = 0;
 80004f2:	183b      	adds	r3, r7, r0
 80004f4:	881a      	ldrh	r2, [r3, #0]
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_ADC_ConvCpltCallback+0x108>)
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	2100      	movs	r1, #0
 80004fc:	50d1      	str	r1, [r2, r3]
		g_adcDmaReadCounts++;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_ADC_ConvCpltCallback+0x110>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	b29a      	uxth	r2, r3
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_ADC_ConvCpltCallback+0x110>)
 8000508:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < ADC_MAX_CHANNELS; i++)
 800050a:	183b      	adds	r3, r7, r0
 800050c:	881a      	ldrh	r2, [r3, #0]
 800050e:	183b      	adds	r3, r7, r0
 8000510:	3201      	adds	r2, #1
 8000512:	801a      	strh	r2, [r3, #0]
 8000514:	230e      	movs	r3, #14
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	2b03      	cmp	r3, #3
 800051c:	d9dd      	bls.n	80004da <HAL_ADC_ConvCpltCallback+0xb2>
	}
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000002c 	.word	0x2000002c
 800052c:	2000006c 	.word	0x2000006c
 8000530:	200000ac 	.word	0x200000ac
 8000534:	200000bc 	.word	0x200000bc
 8000538:	20000028 	.word	0x20000028

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_DMA_Init+0x38>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_DMA_Init+0x38>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	615a      	str	r2, [r3, #20]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_DMA_Init+0x38>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	2009      	movs	r0, #9
 8000560:	f001 fff0 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000564:	2009      	movs	r0, #9
 8000566:	f002 f802 	bl	800256e <HAL_NVIC_EnableIRQ>

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b08b      	sub	sp, #44	; 0x2c
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	2414      	movs	r4, #20
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2314      	movs	r3, #20
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f004 fd65 	bl	8005058 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4b70      	ldr	r3, [pc, #448]	; (8000750 <MX_GPIO_Init+0x1d8>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b6f      	ldr	r3, [pc, #444]	; (8000750 <MX_GPIO_Init+0x1d8>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	0309      	lsls	r1, r1, #12
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b6c      	ldr	r3, [pc, #432]	; (8000750 <MX_GPIO_Init+0x1d8>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	031b      	lsls	r3, r3, #12
 80005a4:	4013      	ands	r3, r2
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005aa:	4b69      	ldr	r3, [pc, #420]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b68      	ldr	r3, [pc, #416]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	03c9      	lsls	r1, r1, #15
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b65      	ldr	r3, [pc, #404]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	03db      	lsls	r3, r3, #15
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b62      	ldr	r3, [pc, #392]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005c8:	695a      	ldr	r2, [r3, #20]
 80005ca:	4b61      	ldr	r3, [pc, #388]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	0289      	lsls	r1, r1, #10
 80005d0:	430a      	orrs	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005d6:	695a      	ldr	r2, [r3, #20]
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b5b      	ldr	r3, [pc, #364]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	02c9      	lsls	r1, r1, #11
 80005ec:	430a      	orrs	r2, r1
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	4b57      	ldr	r3, [pc, #348]	; (8000750 <MX_GPIO_Init+0x1d8>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	02db      	lsls	r3, r3, #11
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	019b      	lsls	r3, r3, #6
 8000602:	4854      	ldr	r0, [pc, #336]	; (8000754 <MX_GPIO_Init+0x1dc>)
 8000604:	2200      	movs	r2, #0
 8000606:	0019      	movs	r1, r3
 8000608:	f002 fad6 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800060c:	23c2      	movs	r3, #194	; 0xc2
 800060e:	0159      	lsls	r1, r3, #5
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f002 face 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 800061c:	494e      	ldr	r1, [pc, #312]	; (8000758 <MX_GPIO_Init+0x1e0>)
 800061e:	4b4f      	ldr	r3, [pc, #316]	; (800075c <MX_GPIO_Init+0x1e4>)
 8000620:	2200      	movs	r2, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f002 fac8 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	0192      	lsls	r2, r2, #6
 800062e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2201      	movs	r2, #1
 8000634:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000642:	193b      	adds	r3, r7, r4
 8000644:	4a43      	ldr	r2, [pc, #268]	; (8000754 <MX_GPIO_Init+0x1dc>)
 8000646:	0019      	movs	r1, r3
 8000648:	0010      	movs	r0, r2
 800064a:	f002 f945 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800064e:	0021      	movs	r1, r4
 8000650:	187b      	adds	r3, r7, r1
 8000652:	22c0      	movs	r2, #192	; 0xc0
 8000654:	0212      	lsls	r2, r2, #8
 8000656:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	000c      	movs	r4, r1
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2203      	movs	r2, #3
 800065e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	193b      	adds	r3, r7, r4
 8000668:	4a3a      	ldr	r2, [pc, #232]	; (8000754 <MX_GPIO_Init+0x1dc>)
 800066a:	0019      	movs	r1, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f002 f933 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	22c3      	movs	r2, #195	; 0xc3
 8000676:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2203      	movs	r2, #3
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000684:	193b      	adds	r3, r7, r4
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <MX_GPIO_Init+0x1e8>)
 8000688:	0019      	movs	r1, r3
 800068a:	0010      	movs	r0, r2
 800068c:	f002 f924 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_12;
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	22c2      	movs	r2, #194	; 0xc2
 8000696:	0152      	lsls	r2, r2, #5
 8000698:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	000c      	movs	r4, r1
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	193a      	adds	r2, r7, r4
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f002 f90e 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2288      	movs	r2, #136	; 0x88
 80006c6:	0352      	lsls	r2, r2, #13
 80006c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	193a      	adds	r2, r7, r4
 80006d2:	2390      	movs	r3, #144	; 0x90
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 f8fd 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a1d      	ldr	r2, [pc, #116]	; (8000758 <MX_GPIO_Init+0x1e0>)
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2201      	movs	r2, #1
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0x1e4>)
 80006fa:	0019      	movs	r1, r3
 80006fc:	0010      	movs	r0, r2
 80006fe:	f002 f8eb 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 8000702:	0021      	movs	r1, r4
 8000704:	187b      	adds	r3, r7, r1
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <MX_GPIO_Init+0x1ec>)
 8000708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2288      	movs	r2, #136	; 0x88
 800070e:	0352      	lsls	r2, r2, #13
 8000710:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	000c      	movs	r4, r1
 800071a:	187b      	adds	r3, r7, r1
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_GPIO_Init+0x1e4>)
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f002 f8d9 	bl	80028d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0192      	lsls	r2, r2, #6
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2203      	movs	r2, #3
 8000734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	187b      	adds	r3, r7, r1
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <MX_GPIO_Init+0x1e4>)
 8000740:	0019      	movs	r1, r3
 8000742:	0010      	movs	r0, r2
 8000744:	f002 f8c8 	bl	80028d8 <HAL_GPIO_Init>

}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b00b      	add	sp, #44	; 0x2c
 800074e:	bd90      	pop	{r4, r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000800 	.word	0x48000800
 8000758:	00000601 	.word	0x00000601
 800075c:	48000400 	.word	0x48000400
 8000760:	48001400 	.word	0x48001400
 8000764:	00000804 	.word	0x00000804

08000768 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_I2C1_Init+0x74>)
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_I2C1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_I2C1_Init+0x74>)
 8000774:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x7c>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_I2C1_Init+0x74>)
 8000780:	2201      	movs	r2, #1
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_I2C1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_I2C1_Init+0x74>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fa25 	bl	8002bf4 <HAL_I2C_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ae:	f000 fab7 	bl	8000d20 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_I2C1_Init+0x74>)
 80007b4:	2100      	movs	r1, #0
 80007b6:	0018      	movs	r0, r3
 80007b8:	f002 fab2 	bl	8002d20 <HAL_I2CEx_ConfigAnalogFilter>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c0:	f000 faae 	bl	8000d20 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <MX_I2C1_Init+0x74>)
 80007c6:	2100      	movs	r1, #0
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 faf5 	bl	8002db8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d2:	f000 faa5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000150 	.word	0x20000150
 80007e0:	40005400 	.word	0x40005400
 80007e4:	2000090e 	.word	0x2000090e

080007e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b08b      	sub	sp, #44	; 0x2c
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	2414      	movs	r4, #20
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f004 fc2c 	bl	8005058 <memset>
  if(i2cHandle->Instance==I2C1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <HAL_I2C_MspInit+0x90>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d131      	bne.n	800086e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b1c      	ldr	r3, [pc, #112]	; (800087c <HAL_I2C_MspInit+0x94>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <HAL_I2C_MspInit+0x94>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	02c9      	lsls	r1, r1, #11
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <HAL_I2C_MspInit+0x94>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	02db      	lsls	r3, r3, #11
 8000820:	4013      	ands	r3, r2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000826:	0021      	movs	r1, r4
 8000828:	187b      	adds	r3, r7, r1
 800082a:	22c0      	movs	r2, #192	; 0xc0
 800082c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2212      	movs	r2, #18
 8000832:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2203      	movs	r2, #3
 800083e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2201      	movs	r2, #1
 8000844:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	187b      	adds	r3, r7, r1
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <HAL_I2C_MspInit+0x98>)
 800084a:	0019      	movs	r1, r3
 800084c:	0010      	movs	r0, r2
 800084e:	f002 f843 	bl	80028d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_I2C_MspInit+0x94>)
 8000854:	69da      	ldr	r2, [r3, #28]
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_I2C_MspInit+0x94>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0389      	lsls	r1, r1, #14
 800085c:	430a      	orrs	r2, r1
 800085e:	61da      	str	r2, [r3, #28]
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_I2C_MspInit+0x94>)
 8000862:	69da      	ldr	r2, [r3, #28]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b00b      	add	sp, #44	; 0x2c
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	40005400 	.word	0x40005400
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400

08000884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f001 f964 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f862 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f7ff fe72 	bl	8000578 <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f7ff fe52 	bl	800053c <MX_DMA_Init>
  MX_ADC_Init();
 8000898:	f7ff fcc2 	bl	8000220 <MX_ADC_Init>
  MX_I2C1_Init();
 800089c:	f7ff ff64 	bl	8000768 <MX_I2C1_Init>
  MX_TIM1_Init();
 80008a0:	f000 fb26 	bl	8000ef0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008a4:	f000 fbe6 	bl	8001074 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a8:	f000 fc46 	bl	8001138 <MX_TIM3_Init>
  MX_TIM14_Init();
 80008ac:	f000 fca8 	bl	8001200 <MX_TIM14_Init>
  MX_TIM15_Init();
 80008b0:	f000 fcf6 	bl	80012a0 <MX_TIM15_Init>
  MX_TIM16_Init();
 80008b4:	f000 fdb6 	bl	8001424 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80008b8:	f001 f8a6 	bl	8001a08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ADC_ConfigDMA();
 80008bc:	f7ff fda4 	bl	8000408 <ADC_ConfigDMA>
  TIM_initTimers();
 80008c0:	f001 f85c 	bl	800197c <TIM_initTimers>
  RightInit();
 80008c4:	f000 fa32 	bl	8000d2c <RightInit>
  LeftInit();
 80008c8:	f000 fa4c 	bl	8000d64 <LeftInit>
  last_time = HAL_GetTick();
 80008cc:	f001 f99c 	bl	8001c08 <HAL_GetTick>
 80008d0:	0002      	movs	r2, r0
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <main+0xb0>)
 80008d4:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	current_time = HAL_GetTick();
 80008d6:	f001 f997 	bl	8001c08 <HAL_GetTick>
 80008da:	0002      	movs	r2, r0
 80008dc:	4b16      	ldr	r3, [pc, #88]	; (8000938 <main+0xb4>)
 80008de:	601a      	str	r2, [r3, #0]
	if((current_time - last_time) >= SYSTEM_TICK)
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <main+0xb4>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <main+0xb0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	2b63      	cmp	r3, #99	; 0x63
 80008ec:	d9f3      	bls.n	80008d6 <main+0x52>
	{
		last_time = current_time;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <main+0xb4>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <main+0xb0>)
 80008f4:	601a      	str	r2, [r3, #0]
		// get adc data
		VbatSense = g_adcBuffer[0];
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <main+0xb8>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	4b10      	ldr	r3, [pc, #64]	; (8000940 <main+0xbc>)
 80008fe:	801a      	strh	r2, [r3, #0]
		RightCurrentCount = g_adcBuffer[1];
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <main+0xb8>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	b29a      	uxth	r2, r3
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <main+0xc0>)
 8000908:	801a      	strh	r2, [r3, #0]
		PotSense = g_adcBuffer[2];
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <main+0xb8>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	b29a      	uxth	r2, r3
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <main+0xc4>)
 8000912:	801a      	strh	r2, [r3, #0]
		LeftCurrentCount = g_adcBuffer[3];
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <main+0xb8>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <main+0xc8>)
 800091c:	801a      	strh	r2, [r3, #0]
		LeftCW(3000);
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <main+0xcc>)
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fa69 	bl	8000df8 <LeftCW>
		RightCW(3000);
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <main+0xcc>)
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fa35 	bl	8000d98 <RightCW>
		print_Values();
 800092e:	f000 f879 	bl	8000a24 <print_Values>
	current_time = HAL_GetTick();
 8000932:	e7d0      	b.n	80008d6 <main+0x52>
 8000934:	200001a8 	.word	0x200001a8
 8000938:	200001a0 	.word	0x200001a0
 800093c:	200000bc 	.word	0x200000bc
 8000940:	200001ae 	.word	0x200001ae
 8000944:	2000019c 	.word	0x2000019c
 8000948:	200001a4 	.word	0x200001a4
 800094c:	200001b0 	.word	0x200001b0
 8000950:	00000bb8 	.word	0x00000bb8

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b097      	sub	sp, #92	; 0x5c
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	2428      	movs	r4, #40	; 0x28
 800095c:	193b      	adds	r3, r7, r4
 800095e:	0018      	movs	r0, r3
 8000960:	2330      	movs	r3, #48	; 0x30
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f004 fb77 	bl	8005058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	2318      	movs	r3, #24
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	2310      	movs	r3, #16
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f004 fb6f 	bl	8005058 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	0018      	movs	r0, r3
 800097e:	2314      	movs	r3, #20
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f004 fb68 	bl	8005058 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000988:	0021      	movs	r1, r4
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2212      	movs	r2, #18
 800098e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2201      	movs	r2, #1
 8000994:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2201      	movs	r2, #1
 800099a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2210      	movs	r2, #16
 80009a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2210      	movs	r2, #16
 80009a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2202      	movs	r2, #2
 80009ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	22a0      	movs	r2, #160	; 0xa0
 80009b8:	0392      	lsls	r2, r2, #14
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	0018      	movs	r0, r3
 80009c6:	f002 fa43 	bl	8002e50 <HAL_RCC_OscConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009ce:	f000 f9a7 	bl	8000d20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d2:	2118      	movs	r1, #24
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2207      	movs	r2, #7
 80009d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2202      	movs	r2, #2
 80009de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2101      	movs	r1, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fd47 	bl	8003484 <HAL_RCC_ClockConfig>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009fa:	f000 f991 	bl	8000d20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2220      	movs	r2, #32
 8000a02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fe8b 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a16:	f000 f983 	bl	8000d20 <Error_Handler>
  }
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b017      	add	sp, #92	; 0x5c
 8000a20:	bd90      	pop	{r4, r7, pc}
	...

08000a24 <print_Values>:

/* USER CODE BEGIN 4 */
void print_Values()
{
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
	uint16_t temp;
	// convert to ASCII for display
	uint8_t arrayVal[] = {0x30, 0x30, 0x30, 0x30, ' ', 0x30, 0x30, 0x30, 0x30, ' ',
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	4ab7      	ldr	r2, [pc, #732]	; (8000d0c <print_Values+0x2e8>)
 8000a2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a30:	c313      	stmia	r3!, {r0, r1, r4}
 8000a32:	6811      	ldr	r1, [r2, #0]
 8000a34:	6019      	str	r1, [r3, #0]
 8000a36:	8891      	ldrh	r1, [r2, #4]
 8000a38:	8099      	strh	r1, [r3, #4]
 8000a3a:	7992      	ldrb	r2, [r2, #6]
 8000a3c:	719a      	strb	r2, [r3, #6]
	0x30, 0x30, 0x30, 0x30, ' ',0x30, 0x30, 0x30, 0x30};
	temp = VbatSense;
 8000a3e:	2516      	movs	r5, #22
 8000a40:	197b      	adds	r3, r7, r5
 8000a42:	4ab3      	ldr	r2, [pc, #716]	; (8000d10 <print_Values+0x2ec>)
 8000a44:	8812      	ldrh	r2, [r2, #0]
 8000a46:	801a      	strh	r2, [r3, #0]
	arrayVal[0] += (temp / 1000);
 8000a48:	003b      	movs	r3, r7
 8000a4a:	781c      	ldrb	r4, [r3, #0]
 8000a4c:	197b      	adds	r3, r7, r5
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	22fa      	movs	r2, #250	; 0xfa
 8000a52:	0091      	lsls	r1, r2, #2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff fb57 	bl	8000108 <__udivsi3>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	18e3      	adds	r3, r4, r3
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	003b      	movs	r3, r7
 8000a66:	701a      	strb	r2, [r3, #0]
	temp = temp % 1000;
 8000a68:	197c      	adds	r4, r7, r5
 8000a6a:	197b      	adds	r3, r7, r5
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	22fa      	movs	r2, #250	; 0xfa
 8000a70:	0091      	lsls	r1, r2, #2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fbce 	bl	8000214 <__aeabi_uidivmod>
 8000a78:	000b      	movs	r3, r1
 8000a7a:	8023      	strh	r3, [r4, #0]
	arrayVal[1] += (temp / 100);
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	785c      	ldrb	r4, [r3, #1]
 8000a80:	197b      	adds	r3, r7, r5
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	2164      	movs	r1, #100	; 0x64
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fb3e 	bl	8000108 <__udivsi3>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	18e3      	adds	r3, r4, r3
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	705a      	strb	r2, [r3, #1]
	temp = temp % 100;
 8000a9a:	197c      	adds	r4, r7, r5
 8000a9c:	197b      	adds	r3, r7, r5
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fbb6 	bl	8000214 <__aeabi_uidivmod>
 8000aa8:	000b      	movs	r3, r1
 8000aaa:	8023      	strh	r3, [r4, #0]
	arrayVal[2] += (temp / 10);
 8000aac:	003b      	movs	r3, r7
 8000aae:	789c      	ldrb	r4, [r3, #2]
 8000ab0:	197b      	adds	r3, r7, r5
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	210a      	movs	r1, #10
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff fb26 	bl	8000108 <__udivsi3>
 8000abc:	0003      	movs	r3, r0
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	18e3      	adds	r3, r4, r3
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	709a      	strb	r2, [r3, #2]
	temp = temp % 10;
 8000aca:	197c      	adds	r4, r7, r5
 8000acc:	197b      	adds	r3, r7, r5
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	210a      	movs	r1, #10
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f7ff fb9e 	bl	8000214 <__aeabi_uidivmod>
 8000ad8:	000b      	movs	r3, r1
 8000ada:	8023      	strh	r3, [r4, #0]
	arrayVal[3] += temp;
 8000adc:	003b      	movs	r3, r7
 8000ade:	78da      	ldrb	r2, [r3, #3]
 8000ae0:	197b      	adds	r3, r7, r5
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	003b      	movs	r3, r7
 8000aec:	70da      	strb	r2, [r3, #3]
	temp = VbatSense;
 8000aee:	197b      	adds	r3, r7, r5
 8000af0:	4a87      	ldr	r2, [pc, #540]	; (8000d10 <print_Values+0x2ec>)
 8000af2:	8812      	ldrh	r2, [r2, #0]
 8000af4:	801a      	strh	r2, [r3, #0]
	arrayVal[5] += (temp / 1000);
 8000af6:	003b      	movs	r3, r7
 8000af8:	795c      	ldrb	r4, [r3, #5]
 8000afa:	197b      	adds	r3, r7, r5
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	22fa      	movs	r2, #250	; 0xfa
 8000b00:	0091      	lsls	r1, r2, #2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff fb00 	bl	8000108 <__udivsi3>
 8000b08:	0003      	movs	r3, r0
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	18e3      	adds	r3, r4, r3
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	003b      	movs	r3, r7
 8000b14:	715a      	strb	r2, [r3, #5]
	temp = temp % 1000;
 8000b16:	197c      	adds	r4, r7, r5
 8000b18:	197b      	adds	r3, r7, r5
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	22fa      	movs	r2, #250	; 0xfa
 8000b1e:	0091      	lsls	r1, r2, #2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fb77 	bl	8000214 <__aeabi_uidivmod>
 8000b26:	000b      	movs	r3, r1
 8000b28:	8023      	strh	r3, [r4, #0]
	arrayVal[6] += (temp / 100);
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	799c      	ldrb	r4, [r3, #6]
 8000b2e:	197b      	adds	r3, r7, r5
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	2164      	movs	r1, #100	; 0x64
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fae7 	bl	8000108 <__udivsi3>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	18e3      	adds	r3, r4, r3
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	003b      	movs	r3, r7
 8000b46:	719a      	strb	r2, [r3, #6]
	temp = temp % 100;
 8000b48:	197c      	adds	r4, r7, r5
 8000b4a:	197b      	adds	r3, r7, r5
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2164      	movs	r1, #100	; 0x64
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fb5f 	bl	8000214 <__aeabi_uidivmod>
 8000b56:	000b      	movs	r3, r1
 8000b58:	8023      	strh	r3, [r4, #0]
	arrayVal[7] += (temp / 10);
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	79dc      	ldrb	r4, [r3, #7]
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	210a      	movs	r1, #10
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff facf 	bl	8000108 <__udivsi3>
 8000b6a:	0003      	movs	r3, r0
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	18e3      	adds	r3, r4, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	003b      	movs	r3, r7
 8000b76:	71da      	strb	r2, [r3, #7]
	temp = temp % 10;
 8000b78:	197c      	adds	r4, r7, r5
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	210a      	movs	r1, #10
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fb47 	bl	8000214 <__aeabi_uidivmod>
 8000b86:	000b      	movs	r3, r1
 8000b88:	8023      	strh	r3, [r4, #0]
	arrayVal[8] += temp;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	7a1a      	ldrb	r2, [r3, #8]
 8000b8e:	197b      	adds	r3, r7, r5
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	003b      	movs	r3, r7
 8000b9a:	721a      	strb	r2, [r3, #8]
	temp = PotSense;
 8000b9c:	197b      	adds	r3, r7, r5
 8000b9e:	4a5d      	ldr	r2, [pc, #372]	; (8000d14 <print_Values+0x2f0>)
 8000ba0:	8812      	ldrh	r2, [r2, #0]
 8000ba2:	801a      	strh	r2, [r3, #0]
	arrayVal[10] += (temp / 1000);
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	7a9c      	ldrb	r4, [r3, #10]
 8000ba8:	197b      	adds	r3, r7, r5
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	22fa      	movs	r2, #250	; 0xfa
 8000bae:	0091      	lsls	r1, r2, #2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff faa9 	bl	8000108 <__udivsi3>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	18e3      	adds	r3, r4, r3
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	729a      	strb	r2, [r3, #10]
	temp = temp % 1000;
 8000bc4:	197c      	adds	r4, r7, r5
 8000bc6:	197b      	adds	r3, r7, r5
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	22fa      	movs	r2, #250	; 0xfa
 8000bcc:	0091      	lsls	r1, r2, #2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fb20 	bl	8000214 <__aeabi_uidivmod>
 8000bd4:	000b      	movs	r3, r1
 8000bd6:	8023      	strh	r3, [r4, #0]
	arrayVal[11] += (temp / 100);
 8000bd8:	003b      	movs	r3, r7
 8000bda:	7adc      	ldrb	r4, [r3, #11]
 8000bdc:	197b      	adds	r3, r7, r5
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	2164      	movs	r1, #100	; 0x64
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fa90 	bl	8000108 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	18e3      	adds	r3, r4, r3
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	72da      	strb	r2, [r3, #11]
	temp = temp % 100;
 8000bf6:	197c      	adds	r4, r7, r5
 8000bf8:	197b      	adds	r3, r7, r5
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	2164      	movs	r1, #100	; 0x64
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fb08 	bl	8000214 <__aeabi_uidivmod>
 8000c04:	000b      	movs	r3, r1
 8000c06:	8023      	strh	r3, [r4, #0]
	arrayVal[12] += (temp / 10);
 8000c08:	003b      	movs	r3, r7
 8000c0a:	7b1c      	ldrb	r4, [r3, #12]
 8000c0c:	197b      	adds	r3, r7, r5
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	210a      	movs	r1, #10
 8000c12:	0018      	movs	r0, r3
 8000c14:	f7ff fa78 	bl	8000108 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	18e3      	adds	r3, r4, r3
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	003b      	movs	r3, r7
 8000c24:	731a      	strb	r2, [r3, #12]
	temp = temp % 10;
 8000c26:	197c      	adds	r4, r7, r5
 8000c28:	197b      	adds	r3, r7, r5
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	210a      	movs	r1, #10
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff faf0 	bl	8000214 <__aeabi_uidivmod>
 8000c34:	000b      	movs	r3, r1
 8000c36:	8023      	strh	r3, [r4, #0]
	arrayVal[13] += temp;
 8000c38:	003b      	movs	r3, r7
 8000c3a:	7b5a      	ldrb	r2, [r3, #13]
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	18d3      	adds	r3, r2, r3
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	003b      	movs	r3, r7
 8000c48:	735a      	strb	r2, [r3, #13]
	temp = LeftCurrentCount;
 8000c4a:	197b      	adds	r3, r7, r5
 8000c4c:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <print_Values+0x2f4>)
 8000c4e:	8812      	ldrh	r2, [r2, #0]
 8000c50:	801a      	strh	r2, [r3, #0]
	arrayVal[15] += (temp / 1000);
 8000c52:	003b      	movs	r3, r7
 8000c54:	7bdc      	ldrb	r4, [r3, #15]
 8000c56:	197b      	adds	r3, r7, r5
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	22fa      	movs	r2, #250	; 0xfa
 8000c5c:	0091      	lsls	r1, r2, #2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fa52 	bl	8000108 <__udivsi3>
 8000c64:	0003      	movs	r3, r0
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	18e3      	adds	r3, r4, r3
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	003b      	movs	r3, r7
 8000c70:	73da      	strb	r2, [r3, #15]
	temp = temp % 1000;
 8000c72:	197c      	adds	r4, r7, r5
 8000c74:	197b      	adds	r3, r7, r5
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	22fa      	movs	r2, #250	; 0xfa
 8000c7a:	0091      	lsls	r1, r2, #2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff fac9 	bl	8000214 <__aeabi_uidivmod>
 8000c82:	000b      	movs	r3, r1
 8000c84:	8023      	strh	r3, [r4, #0]
	arrayVal[16] += (temp / 100);
 8000c86:	003b      	movs	r3, r7
 8000c88:	7c1c      	ldrb	r4, [r3, #16]
 8000c8a:	197b      	adds	r3, r7, r5
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2164      	movs	r1, #100	; 0x64
 8000c90:	0018      	movs	r0, r3
 8000c92:	f7ff fa39 	bl	8000108 <__udivsi3>
 8000c96:	0003      	movs	r3, r0
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	18e3      	adds	r3, r4, r3
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	003b      	movs	r3, r7
 8000ca2:	741a      	strb	r2, [r3, #16]
	temp = temp % 100;
 8000ca4:	197c      	adds	r4, r7, r5
 8000ca6:	197b      	adds	r3, r7, r5
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	2164      	movs	r1, #100	; 0x64
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fab1 	bl	8000214 <__aeabi_uidivmod>
 8000cb2:	000b      	movs	r3, r1
 8000cb4:	8023      	strh	r3, [r4, #0]
	arrayVal[17] += (temp / 10);
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	7c5c      	ldrb	r4, [r3, #17]
 8000cba:	197b      	adds	r3, r7, r5
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff fa21 	bl	8000108 <__udivsi3>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	18e3      	adds	r3, r4, r3
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	745a      	strb	r2, [r3, #17]
	temp = temp % 10;
 8000cd4:	197c      	adds	r4, r7, r5
 8000cd6:	197b      	adds	r3, r7, r5
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	210a      	movs	r1, #10
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fa99 	bl	8000214 <__aeabi_uidivmod>
 8000ce2:	000b      	movs	r3, r1
 8000ce4:	8023      	strh	r3, [r4, #0]
	arrayVal[18] += temp;
 8000ce6:	003b      	movs	r3, r7
 8000ce8:	7c9a      	ldrb	r2, [r3, #18]
 8000cea:	197b      	adds	r3, r7, r5
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	18d3      	adds	r3, r2, r3
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	003b      	movs	r3, r7
 8000cf6:	749a      	strb	r2, [r3, #18]
	// send it across
	HAL_UART_Transmit(&huart2, arrayVal, sizeof(arrayVal), 100);
 8000cf8:	0039      	movs	r1, r7
 8000cfa:	4808      	ldr	r0, [pc, #32]	; (8000d1c <print_Values+0x2f8>)
 8000cfc:	2364      	movs	r3, #100	; 0x64
 8000cfe:	2213      	movs	r2, #19
 8000d00:	f003 fddc 	bl	80048bc <HAL_UART_Transmit>
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b006      	add	sp, #24
 8000d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d0c:	08005080 	.word	0x08005080
 8000d10:	200001ae 	.word	0x200001ae
 8000d14:	200001a4 	.word	0x200001a4
 8000d18:	200001b0 	.word	0x200001b0
 8000d1c:	20000364 	.word	0x20000364

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <RightInit>:
#include "tim.h"

uint16_t rightPWM, leftPWM;

void RightInit(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_RIGHT_A_H_GPIO_Port, MOTOR_RIGHT_A_H_Pin, GPIO_PIN_RESET);
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <RightInit+0x2c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	0019      	movs	r1, r3
 8000d3a:	f001 ff3d 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_RIGHT_B_H_GPIO_Port, MOTOR_RIGHT_B_H_Pin, GPIO_PIN_RESET);
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <RightInit+0x30>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	0019      	movs	r1, r3
 8000d48:	f001 ff36 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM14->CCR1 = 0; // Right ILIM
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <RightInit+0x34>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	40002000 	.word	0x40002000

08000d64 <LeftInit>:

void LeftInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_LEFT_A_H_GPIO_Port, MOTOR_LEFT_A_H_Pin, GPIO_PIN_RESET);
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	0119      	lsls	r1, r3, #4
 8000d6c:	2390      	movs	r3, #144	; 0x90
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	2200      	movs	r2, #0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f001 ff20 	bl	8002bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_LEFT_B_H_GPIO_Port, MOTOR_LEFT_B_H_Pin, GPIO_PIN_RESET);
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	0159      	lsls	r1, r3, #5
 8000d7c:	2390      	movs	r3, #144	; 0x90
 8000d7e:	05db      	lsls	r3, r3, #23
 8000d80:	2200      	movs	r2, #0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 ff18 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM16->CCR1 = 0; // Right ILIM
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <LeftInit+0x30>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40014400 	.word	0x40014400

08000d98 <RightCW>:


void RightCW(uint32_t duty)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if(duty > 30000)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <RightCW+0x4c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d901      	bls.n	8000dac <RightCW+0x14>
	{
		duty = 30000;
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <RightCW+0x4c>)
 8000daa:	607b      	str	r3, [r7, #4]
	}
	TIM1->CCR3 = 0; // Right B L
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <RightCW+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(MOTOR_RIGHT_A_H_GPIO_Port, MOTOR_RIGHT_A_H_Pin, GPIO_PIN_RESET);
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	480d      	ldr	r0, [pc, #52]	; (8000dec <RightCW+0x54>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	0019      	movs	r1, r3
 8000dbc:	f001 fefc 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM1->CCR1 = duty;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <RightCW+0x50>)
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(MOTOR_RIGHT_B_H_GPIO_Port, MOTOR_RIGHT_B_H_Pin, GPIO_PIN_SET);
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	019b      	lsls	r3, r3, #6
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <RightCW+0x58>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	0019      	movs	r1, r3
 8000dd0:	f001 fef2 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM14->CCR1 = 2000; // 3000  =  0.15A
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <RightCW+0x5c>)
 8000dd6:	22fa      	movs	r2, #250	; 0xfa
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	00007530 	.word	0x00007530
 8000de8:	40012c00 	.word	0x40012c00
 8000dec:	48000400 	.word	0x48000400
 8000df0:	48000800 	.word	0x48000800
 8000df4:	40002000 	.word	0x40002000

08000df8 <LeftCW>:
	HAL_GPIO_WritePin(MOTOR_RIGHT_A_H_GPIO_Port, MOTOR_RIGHT_A_H_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_RIGHT_B_H_GPIO_Port, MOTOR_RIGHT_B_H_Pin, GPIO_PIN_RESET);
}

void LeftCW(uint32_t duty)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if(duty > 30000)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <LeftCW+0x50>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d901      	bls.n	8000e0c <LeftCW+0x14>
	{
		duty = 30000;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <LeftCW+0x50>)
 8000e0a:	607b      	str	r3, [r7, #4]
	}
	TIM15->CCR2 = 0; // Left B L
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <LeftCW+0x54>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(MOTOR_LEFT_A_H_GPIO_Port, MOTOR_LEFT_A_H_Pin, GPIO_PIN_RESET);
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	0119      	lsls	r1, r3, #4
 8000e16:	2390      	movs	r3, #144	; 0x90
 8000e18:	05db      	lsls	r3, r3, #23
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 fecb 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM15->CCR1 = duty;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <LeftCW+0x54>)
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(MOTOR_LEFT_B_H_GPIO_Port, MOTOR_LEFT_B_H_Pin, GPIO_PIN_SET);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	0159      	lsls	r1, r3, #5
 8000e2c:	2390      	movs	r3, #144	; 0x90
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2201      	movs	r2, #1
 8000e32:	0018      	movs	r0, r3
 8000e34:	f001 fec0 	bl	8002bb8 <HAL_GPIO_WritePin>
	TIM16->CCR1 = 2000; // 3000  =  0.15A
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LeftCW+0x58>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e40:	46c0      	nop			; (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b002      	add	sp, #8
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	00007530 	.word	0x00007530
 8000e4c:	40014000 	.word	0x40014000
 8000e50:	40014400 	.word	0x40014400

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_MspInit+0x44>)
 8000e5c:	699a      	ldr	r2, [r3, #24]
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_MspInit+0x44>)
 8000e60:	2101      	movs	r1, #1
 8000e62:	430a      	orrs	r2, r1
 8000e64:	619a      	str	r2, [r3, #24]
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_MspInit+0x44>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x44>)
 8000e74:	69da      	ldr	r2, [r3, #28]
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_MspInit+0x44>)
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	0549      	lsls	r1, r1, #21
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	61da      	str	r2, [r3, #28]
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_MspInit+0x44>)
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	055b      	lsls	r3, r3, #21
 8000e88:	4013      	ands	r3, r2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40021000 	.word	0x40021000

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 fe90 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <DMA1_Channel1_IRQHandler+0x14>)
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f001 fc16 	bl	8002704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	200000cc 	.word	0x200000cc

08000ee4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	2348      	movs	r3, #72	; 0x48
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	0018      	movs	r0, r3
 8000efc:	2310      	movs	r3, #16
 8000efe:	001a      	movs	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	f004 f8a9 	bl	8005058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	2340      	movs	r3, #64	; 0x40
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2308      	movs	r3, #8
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	f004 f8a1 	bl	8005058 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	2324      	movs	r3, #36	; 0x24
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	231c      	movs	r3, #28
 8000f1e:	001a      	movs	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f004 f899 	bl	8005058 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	0018      	movs	r0, r3
 8000f2a:	2320      	movs	r3, #32
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f004 f892 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f34:	4b4c      	ldr	r3, [pc, #304]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f36:	4a4d      	ldr	r2, [pc, #308]	; (800106c <MX_TIM1_Init+0x17c>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f3a:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000;
 8000f46:	4b48      	ldr	r3, [pc, #288]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5e:	4b42      	ldr	r3, [pc, #264]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f002 fcbf 	bl	80038e4 <HAL_TIM_Base_Init>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000f6a:	f7ff fed9 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	2148      	movs	r1, #72	; 0x48
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2280      	movs	r2, #128	; 0x80
 8000f74:	0152      	lsls	r2, r2, #5
 8000f76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f78:	187a      	adds	r2, r7, r1
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f7c:	0011      	movs	r1, r2
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f002 ff7e 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 8000f84:	1e03      	subs	r3, r0, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f88:	f7ff feca 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <MX_TIM1_Init+0x178>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f002 fcf8 	bl	8003984 <HAL_TIM_PWM_Init>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000f98:	f7ff fec2 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2140      	movs	r1, #64	; 0x40
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000faa:	187a      	adds	r2, r7, r1
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <MX_TIM1_Init+0x178>)
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 fb73 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	1e03      	subs	r3, r0, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000fba:	f7ff feb1 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2124      	movs	r1, #36	; 0x24
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2260      	movs	r2, #96	; 0x60
 8000fc4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fea:	1879      	adds	r1, r7, r1
 8000fec:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_TIM1_Init+0x178>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f002 fe7f 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	1e03      	subs	r3, r0, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000ffa:	f7ff fe91 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ffe:	2324      	movs	r3, #36	; 0x24
 8001000:	18f9      	adds	r1, r7, r3
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM1_Init+0x178>)
 8001004:	2208      	movs	r2, #8
 8001006:	0018      	movs	r0, r3
 8001008:	f002 fe74 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8001010:	f7ff fe86 	bl	8000d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	0152      	lsls	r2, r2, #5
 8001032:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	0192      	lsls	r2, r2, #6
 800103a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001042:	1d3a      	adds	r2, r7, #4
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_TIM1_Init+0x178>)
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f003 fb85 	bl	8004758 <HAL_TIMEx_ConfigBreakDeadTime>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8001052:	f7ff fe65 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <MX_TIM1_Init+0x178>)
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fbc7 	bl	80017ec <HAL_TIM_MspPostInit>

}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b016      	add	sp, #88	; 0x58
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000244 	.word	0x20000244
 800106c:	40012c00 	.word	0x40012c00
 8001070:	00007530 	.word	0x00007530

08001074 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b08d      	sub	sp, #52	; 0x34
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800107a:	240c      	movs	r4, #12
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	2324      	movs	r3, #36	; 0x24
 8001082:	001a      	movs	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f003 ffe7 	bl	8005058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	0018      	movs	r0, r3
 800108e:	2308      	movs	r3, #8
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f003 ffe0 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <MX_TIM2_Init+0xc0>)
 800109a:	2280      	movs	r2, #128	; 0x80
 800109c:	05d2      	lsls	r2, r2, #23
 800109e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b23      	ldr	r3, [pc, #140]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010ac:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	4252      	negs	r2, r2
 80010b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010c0:	0021      	movs	r1, r4
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2201      	movs	r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2201      	movs	r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	2201      	movs	r2, #1
 80010ea:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ec:	187b      	adds	r3, r7, r1
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010f8:	187a      	adds	r2, r7, r1
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_TIM2_Init+0xc0>)
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f002 fd50 	bl	8003ba4 <HAL_TIM_Encoder_Init>
 8001104:	1e03      	subs	r3, r0, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001108:	f7ff fe0a 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001118:	1d3a      	adds	r2, r7, #4
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_TIM2_Init+0xc0>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f003 fabc 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001128:	f7ff fdfa 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b00d      	add	sp, #52	; 0x34
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	2000028c 	.word	0x2000028c

08001138 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b08d      	sub	sp, #52	; 0x34
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800113e:	240c      	movs	r4, #12
 8001140:	193b      	adds	r3, r7, r4
 8001142:	0018      	movs	r0, r3
 8001144:	2324      	movs	r3, #36	; 0x24
 8001146:	001a      	movs	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f003 ff85 	bl	8005058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	0018      	movs	r0, r3
 8001152:	2308      	movs	r3, #8
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f003 ff7e 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_TIM3_Init+0xbc>)
 800115e:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <MX_TIM3_Init+0xc0>)
 8001160:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <MX_TIM3_Init+0xbc>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_TIM3_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_TIM3_Init+0xbc>)
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <MX_TIM3_Init+0xc4>)
 8001172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_TIM3_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_TIM3_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001180:	0021      	movs	r1, r4
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2201      	movs	r2, #1
 8001192:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2201      	movs	r2, #1
 80011aa:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011b8:	187a      	adds	r2, r7, r1
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_TIM3_Init+0xbc>)
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f002 fcf0 	bl	8003ba4 <HAL_TIM_Encoder_Init>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80011c8:	f7ff fdaa 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011d8:	1d3a      	adds	r2, r7, #4
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_TIM3_Init+0xbc>)
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f003 fa5c 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80011e8:	f7ff fd9a 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b00d      	add	sp, #52	; 0x34
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	200001fc 	.word	0x200001fc
 80011f8:	40000400 	.word	0x40000400
 80011fc:	0000ffff 	.word	0x0000ffff

08001200 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	0018      	movs	r0, r3
 800120a:	231c      	movs	r3, #28
 800120c:	001a      	movs	r2, r3
 800120e:	2100      	movs	r1, #0
 8001210:	f003 ff22 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001214:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_TIM14_Init+0x94>)
 8001216:	4a20      	ldr	r2, [pc, #128]	; (8001298 <MX_TIM14_Init+0x98>)
 8001218:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <MX_TIM14_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <MX_TIM14_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 3000;
 8001226:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <MX_TIM14_Init+0x94>)
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_TIM14_Init+0x9c>)
 800122a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <MX_TIM14_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_TIM14_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <MX_TIM14_Init+0x94>)
 800123a:	0018      	movs	r0, r3
 800123c:	f002 fb52 	bl	80038e4 <HAL_TIM_Base_Init>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001244:	f7ff fd6c 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_TIM14_Init+0x94>)
 800124a:	0018      	movs	r0, r3
 800124c:	f002 fb9a 	bl	8003984 <HAL_TIM_PWM_Init>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001254:	f7ff fd64 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2260      	movs	r2, #96	; 0x60
 800125c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_TIM14_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f002 fd3c 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001280:	f7ff fd4e 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <MX_TIM14_Init+0x94>)
 8001286:	0018      	movs	r0, r3
 8001288:	f000 fab0 	bl	80017ec <HAL_TIM_MspPostInit>

}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b008      	add	sp, #32
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002d4 	.word	0x200002d4
 8001298:	40002000 	.word	0x40002000
 800129c:	00000bb8 	.word	0x00000bb8

080012a0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b096      	sub	sp, #88	; 0x58
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	2348      	movs	r3, #72	; 0x48
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	0018      	movs	r0, r3
 80012ac:	2310      	movs	r3, #16
 80012ae:	001a      	movs	r2, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	f003 fed1 	bl	8005058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b6:	2340      	movs	r3, #64	; 0x40
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	0018      	movs	r0, r3
 80012bc:	2308      	movs	r3, #8
 80012be:	001a      	movs	r2, r3
 80012c0:	2100      	movs	r1, #0
 80012c2:	f003 fec9 	bl	8005058 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	2324      	movs	r3, #36	; 0x24
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	0018      	movs	r0, r3
 80012cc:	231c      	movs	r3, #28
 80012ce:	001a      	movs	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f003 fec1 	bl	8005058 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	0018      	movs	r0, r3
 80012da:	2320      	movs	r3, #32
 80012dc:	001a      	movs	r2, r3
 80012de:	2100      	movs	r1, #0
 80012e0:	f003 feba 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <MX_TIM15_Init+0x178>)
 80012e6:	4a4d      	ldr	r2, [pc, #308]	; (800141c <MX_TIM15_Init+0x17c>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <MX_TIM15_Init+0x178>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b49      	ldr	r3, [pc, #292]	; (8001418 <MX_TIM15_Init+0x178>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 30000;
 80012f6:	4b48      	ldr	r3, [pc, #288]	; (8001418 <MX_TIM15_Init+0x178>)
 80012f8:	4a49      	ldr	r2, [pc, #292]	; (8001420 <MX_TIM15_Init+0x180>)
 80012fa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b46      	ldr	r3, [pc, #280]	; (8001418 <MX_TIM15_Init+0x178>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001302:	4b45      	ldr	r3, [pc, #276]	; (8001418 <MX_TIM15_Init+0x178>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b43      	ldr	r3, [pc, #268]	; (8001418 <MX_TIM15_Init+0x178>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800130e:	4b42      	ldr	r3, [pc, #264]	; (8001418 <MX_TIM15_Init+0x178>)
 8001310:	0018      	movs	r0, r3
 8001312:	f002 fae7 	bl	80038e4 <HAL_TIM_Base_Init>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800131a:	f7ff fd01 	bl	8000d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	2148      	movs	r1, #72	; 0x48
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	0152      	lsls	r2, r2, #5
 8001326:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001328:	187a      	adds	r2, r7, r1
 800132a:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <MX_TIM15_Init+0x178>)
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f002 fda6 	bl	8003e80 <HAL_TIM_ConfigClockSource>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8001338:	f7ff fcf2 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800133c:	4b36      	ldr	r3, [pc, #216]	; (8001418 <MX_TIM15_Init+0x178>)
 800133e:	0018      	movs	r0, r3
 8001340:	f002 fb20 	bl	8003984 <HAL_TIM_PWM_Init>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 8001348:	f7ff fcea 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800135a:	187a      	adds	r2, r7, r1
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_TIM15_Init+0x178>)
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f003 f99b 	bl	800469c <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 800136a:	f7ff fcd9 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136e:	2124      	movs	r1, #36	; 0x24
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2260      	movs	r2, #96	; 0x60
 8001374:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	1879      	adds	r1, r7, r1
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_TIM15_Init+0x178>)
 800139e:	2200      	movs	r2, #0
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 fca7 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80013aa:	f7ff fcb9 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ae:	2324      	movs	r3, #36	; 0x24
 80013b0:	18f9      	adds	r1, r7, r3
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_TIM15_Init+0x178>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	0018      	movs	r0, r3
 80013b8:	f002 fc9c 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 80013c0:	f7ff fcae 	bl	8000d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0152      	lsls	r2, r2, #5
 80013e2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0192      	lsls	r2, r2, #6
 80013ea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80013f2:	1d3a      	adds	r2, r7, #4
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_TIM15_Init+0x178>)
 80013f6:	0011      	movs	r1, r2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f003 f9ad 	bl	8004758 <HAL_TIMEx_ConfigBreakDeadTime>
 80013fe:	1e03      	subs	r3, r0, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM15_Init+0x166>
  {
    Error_Handler();
 8001402:	f7ff fc8d 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <MX_TIM15_Init+0x178>)
 8001408:	0018      	movs	r0, r3
 800140a:	f000 f9ef 	bl	80017ec <HAL_TIM_MspPostInit>

}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b016      	add	sp, #88	; 0x58
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	200001b4 	.word	0x200001b4
 800141c:	40014000 	.word	0x40014000
 8001420:	00007530 	.word	0x00007530

08001424 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b090      	sub	sp, #64	; 0x40
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800142a:	2324      	movs	r3, #36	; 0x24
 800142c:	18fb      	adds	r3, r7, r3
 800142e:	0018      	movs	r0, r3
 8001430:	231c      	movs	r3, #28
 8001432:	001a      	movs	r2, r3
 8001434:	2100      	movs	r1, #0
 8001436:	f003 fe0f 	bl	8005058 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	0018      	movs	r0, r3
 800143e:	2320      	movs	r3, #32
 8001440:	001a      	movs	r2, r3
 8001442:	2100      	movs	r1, #0
 8001444:	f003 fe08 	bl	8005058 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <MX_TIM16_Init+0x100>)
 800144a:	4a37      	ldr	r2, [pc, #220]	; (8001528 <MX_TIM16_Init+0x104>)
 800144c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <MX_TIM16_Init+0x100>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b33      	ldr	r3, [pc, #204]	; (8001524 <MX_TIM16_Init+0x100>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 3000;
 800145a:	4b32      	ldr	r3, [pc, #200]	; (8001524 <MX_TIM16_Init+0x100>)
 800145c:	4a33      	ldr	r2, [pc, #204]	; (800152c <MX_TIM16_Init+0x108>)
 800145e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b30      	ldr	r3, [pc, #192]	; (8001524 <MX_TIM16_Init+0x100>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001466:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_TIM16_Init+0x100>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <MX_TIM16_Init+0x100>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM16_Init+0x100>)
 8001474:	0018      	movs	r0, r3
 8001476:	f002 fa35 	bl	80038e4 <HAL_TIM_Base_Init>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800147e:	f7ff fc4f 	bl	8000d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM16_Init+0x100>)
 8001484:	0018      	movs	r0, r3
 8001486:	f002 fa7d 	bl	8003984 <HAL_TIM_PWM_Init>
 800148a:	1e03      	subs	r3, r0, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800148e:	f7ff fc47 	bl	8000d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	2124      	movs	r1, #36	; 0x24
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2260      	movs	r2, #96	; 0x60
 8001498:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014be:	1879      	adds	r1, r7, r1
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_TIM16_Init+0x100>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	0018      	movs	r0, r3
 80014c6:	f002 fc15 	bl	8003cf4 <HAL_TIM_PWM_ConfigChannel>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80014ce:	f7ff fc27 	bl	8000d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	0192      	lsls	r2, r2, #6
 80014f6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80014fe:	1d3a      	adds	r2, r7, #4
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_TIM16_Init+0x100>)
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f003 f927 	bl	8004758 <HAL_TIMEx_ConfigBreakDeadTime>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800150e:	f7ff fc07 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <MX_TIM16_Init+0x100>)
 8001514:	0018      	movs	r0, r3
 8001516:	f000 f969 	bl	80017ec <HAL_TIM_MspPostInit>

}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b010      	add	sp, #64	; 0x40
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	2000031c 	.word	0x2000031c
 8001528:	40014400 	.word	0x40014400
 800152c:	00000bb8 	.word	0x00000bb8

08001530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b08f      	sub	sp, #60	; 0x3c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	2424      	movs	r4, #36	; 0x24
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	2314      	movs	r3, #20
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f003 fd88 	bl	8005058 <memset>
  if(tim_baseHandle->Instance==TIM1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a4d      	ldr	r2, [pc, #308]	; (8001684 <HAL_TIM_Base_MspInit+0x154>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d133      	bne.n	80015ba <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001554:	699a      	ldr	r2, [r3, #24]
 8001556:	4b4c      	ldr	r3, [pc, #304]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001558:	2180      	movs	r1, #128	; 0x80
 800155a:	0109      	lsls	r1, r1, #4
 800155c:	430a      	orrs	r2, r1
 800155e:	619a      	str	r2, [r3, #24]
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	011b      	lsls	r3, r3, #4
 8001568:	4013      	ands	r3, r2
 800156a:	623b      	str	r3, [r7, #32]
 800156c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	4b46      	ldr	r3, [pc, #280]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	4b45      	ldr	r3, [pc, #276]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	02c9      	lsls	r1, r1, #11
 8001578:	430a      	orrs	r2, r1
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	4b42      	ldr	r3, [pc, #264]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	02db      	lsls	r3, r3, #11
 8001584:	4013      	ands	r3, r2
 8001586:	61fb      	str	r3, [r7, #28]
 8001588:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800158a:	193b      	adds	r3, r7, r4
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	0152      	lsls	r2, r2, #5
 8001590:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	0021      	movs	r1, r4
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2202      	movs	r2, #2
 8001598:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2202      	movs	r2, #2
 80015aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	4a37      	ldr	r2, [pc, #220]	; (800168c <HAL_TIM_Base_MspInit+0x15c>)
 80015b0:	0019      	movs	r1, r3
 80015b2:	0010      	movs	r0, r2
 80015b4:	f001 f990 	bl	80028d8 <HAL_GPIO_Init>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80015b8:	e060      	b.n	800167c <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM14)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a34      	ldr	r2, [pc, #208]	; (8001690 <HAL_TIM_Base_MspInit+0x160>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10e      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	0049      	lsls	r1, r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	61da      	str	r2, [r3, #28]
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015d4:	69da      	ldr	r2, [r3, #28]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69bb      	ldr	r3, [r7, #24]
}
 80015e0:	e04c      	b.n	800167c <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM15)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <HAL_TIM_Base_MspInit+0x164>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d134      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	0249      	lsls	r1, r1, #9
 80015f6:	430a      	orrs	r2, r1
 80015f8:	619a      	str	r2, [r3, #24]
 80015fa:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 80015fc:	699a      	ldr	r2, [r3, #24]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	025b      	lsls	r3, r3, #9
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	0289      	lsls	r1, r1, #10
 8001612:	430a      	orrs	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001624:	2124      	movs	r1, #36	; 0x24
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	187b      	adds	r3, r7, r1
 8001630:	2202      	movs	r2, #2
 8001632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	187b      	adds	r3, r7, r1
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	187b      	adds	r3, r7, r1
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	187a      	adds	r2, r7, r1
 8001648:	2390      	movs	r3, #144	; 0x90
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f001 f942 	bl	80028d8 <HAL_GPIO_Init>
}
 8001654:	e012      	b.n	800167c <HAL_TIM_Base_MspInit+0x14c>
  else if(tim_baseHandle->Instance==TIM16) ///25mohm resistor
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_TIM_Base_MspInit+0x168>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d10d      	bne.n	800167c <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001662:	699a      	ldr	r2, [r3, #24]
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0289      	lsls	r1, r1, #10
 800166a:	430a      	orrs	r2, r1
 800166c:	619a      	str	r2, [r3, #24]
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_TIM_Base_MspInit+0x158>)
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	2380      	movs	r3, #128	; 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	46c0      	nop			; (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	b00f      	add	sp, #60	; 0x3c
 8001682:	bd90      	pop	{r4, r7, pc}
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40021000 	.word	0x40021000
 800168c:	48000400 	.word	0x48000400
 8001690:	40002000 	.word	0x40002000
 8001694:	40014000 	.word	0x40014000
 8001698:	40014400 	.word	0x40014400

0800169c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b08d      	sub	sp, #52	; 0x34
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	241c      	movs	r4, #28
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	0018      	movs	r0, r3
 80016aa:	2314      	movs	r3, #20
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	f003 fcd2 	bl	8005058 <memset>
  if(tim_encoderHandle->Instance==TIM2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	429a      	cmp	r2, r3
 80016be:	d155      	bne.n	800176c <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016c2:	69da      	ldr	r2, [r3, #28]
 80016c4:	4b46      	ldr	r3, [pc, #280]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	61da      	str	r2, [r3, #28]
 80016cc:	4b44      	ldr	r3, [pc, #272]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b41      	ldr	r3, [pc, #260]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0289      	lsls	r1, r1, #10
 80016e2:	430a      	orrs	r2, r1
 80016e4:	615a      	str	r2, [r3, #20]
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	029b      	lsls	r3, r3, #10
 80016ee:	4013      	ands	r3, r2
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	02c9      	lsls	r1, r1, #11
 80016fe:	430a      	orrs	r2, r1
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	02db      	lsls	r3, r3, #11
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2280      	movs	r2, #128	; 0x80
 8001714:	0212      	lsls	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	2202      	movs	r2, #2
 800171c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	193b      	adds	r3, r7, r4
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	193b      	adds	r3, r7, r4
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2202      	movs	r2, #2
 800172e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	193a      	adds	r2, r7, r4
 8001732:	2390      	movs	r3, #144	; 0x90
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f001 f8cd 	bl	80028d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173e:	0021      	movs	r1, r4
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2208      	movs	r2, #8
 8001744:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2202      	movs	r2, #2
 800174a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2202      	movs	r2, #2
 800175c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	187b      	adds	r3, r7, r1
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <HAL_TIM_Encoder_MspInit+0x148>)
 8001762:	0019      	movs	r1, r3
 8001764:	0010      	movs	r0, r2
 8001766:	f001 f8b7 	bl	80028d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800176a:	e034      	b.n	80017d6 <HAL_TIM_Encoder_MspInit+0x13a>
  else if(tim_encoderHandle->Instance==TIM3)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d12f      	bne.n	80017d6 <HAL_TIM_Encoder_MspInit+0x13a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 800177c:	2102      	movs	r1, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	61da      	str	r2, [r3, #28]
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	2202      	movs	r2, #2
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	02c9      	lsls	r1, r1, #11
 8001798:	430a      	orrs	r2, r1
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_TIM_Encoder_MspInit+0x144>)
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	02db      	lsls	r3, r3, #11
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017aa:	211c      	movs	r1, #28
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2230      	movs	r2, #48	; 0x30
 80017b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2202      	movs	r2, #2
 80017b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80017c4:	187b      	adds	r3, r7, r1
 80017c6:	2201      	movs	r2, #1
 80017c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_TIM_Encoder_MspInit+0x148>)
 80017ce:	0019      	movs	r1, r3
 80017d0:	0010      	movs	r0, r2
 80017d2:	f001 f881 	bl	80028d8 <HAL_GPIO_Init>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b00d      	add	sp, #52	; 0x34
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40021000 	.word	0x40021000
 80017e4:	48000400 	.word	0x48000400
 80017e8:	40000400 	.word	0x40000400

080017ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b08d      	sub	sp, #52	; 0x34
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	241c      	movs	r4, #28
 80017f6:	193b      	adds	r3, r7, r4
 80017f8:	0018      	movs	r0, r3
 80017fa:	2314      	movs	r3, #20
 80017fc:	001a      	movs	r2, r3
 80017fe:	2100      	movs	r1, #0
 8001800:	f003 fc2a 	bl	8005058 <memset>
  if(timHandle->Instance==TIM1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a56      	ldr	r2, [pc, #344]	; (8001964 <HAL_TIM_MspPostInit+0x178>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d126      	bne.n	800185c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b56      	ldr	r3, [pc, #344]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	4b55      	ldr	r3, [pc, #340]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0289      	lsls	r1, r1, #10
 8001818:	430a      	orrs	r2, r1
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
 8001828:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	22a0      	movs	r2, #160	; 0xa0
 800182e:	00d2      	lsls	r2, r2, #3
 8001830:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	0021      	movs	r1, r4
 8001834:	187b      	adds	r3, r7, r1
 8001836:	2202      	movs	r2, #2
 8001838:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	187b      	adds	r3, r7, r1
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001846:	187b      	adds	r3, r7, r1
 8001848:	2202      	movs	r2, #2
 800184a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	187a      	adds	r2, r7, r1
 800184e:	2390      	movs	r3, #144	; 0x90
 8001850:	05db      	lsls	r3, r3, #23
 8001852:	0011      	movs	r1, r2
 8001854:	0018      	movs	r0, r3
 8001856:	f001 f83f 	bl	80028d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800185a:	e07e      	b.n	800195a <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM14)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_TIM_MspPostInit+0x180>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d124      	bne.n	80018b0 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	02c9      	lsls	r1, r1, #11
 8001870:	430a      	orrs	r2, r1
 8001872:	615a      	str	r2, [r3, #20]
 8001874:	4b3c      	ldr	r3, [pc, #240]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	02db      	lsls	r3, r3, #11
 800187c:	4013      	ands	r3, r2
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001882:	211c      	movs	r1, #28
 8001884:	187b      	adds	r3, r7, r1
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	187b      	adds	r3, r7, r1
 800188c:	2202      	movs	r2, #2
 800188e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	187b      	adds	r3, r7, r1
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	187b      	adds	r3, r7, r1
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 800189c:	187b      	adds	r3, r7, r1
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	187b      	adds	r3, r7, r1
 80018a4:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_TIM_MspPostInit+0x184>)
 80018a6:	0019      	movs	r1, r3
 80018a8:	0010      	movs	r0, r2
 80018aa:	f001 f815 	bl	80028d8 <HAL_GPIO_Init>
}
 80018ae:	e054      	b.n	800195a <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM15)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2f      	ldr	r2, [pc, #188]	; (8001974 <HAL_TIM_MspPostInit+0x188>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d125      	bne.n	8001906 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	02c9      	lsls	r1, r1, #11
 80018c4:	430a      	orrs	r2, r1
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 80018ca:	695a      	ldr	r2, [r3, #20]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	02db      	lsls	r3, r3, #11
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018d6:	211c      	movs	r1, #28
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	22c0      	movs	r2, #192	; 0xc0
 80018dc:	0212      	lsls	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2202      	movs	r2, #2
 80018e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2201      	movs	r2, #1
 80018f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <HAL_TIM_MspPostInit+0x184>)
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f000 ffea 	bl	80028d8 <HAL_GPIO_Init>
}
 8001904:	e029      	b.n	800195a <HAL_TIM_MspPostInit+0x16e>
  else if(timHandle->Instance==TIM16)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_TIM_MspPostInit+0x18c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d124      	bne.n	800195a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	02c9      	lsls	r1, r1, #11
 800191a:	430a      	orrs	r2, r1
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_TIM_MspPostInit+0x17c>)
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	4013      	ands	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800192c:	211c      	movs	r1, #28
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0052      	lsls	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2202      	movs	r2, #2
 800193a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	187b      	adds	r3, r7, r1
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	187b      	adds	r3, r7, r1
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001948:	187b      	adds	r3, r7, r1
 800194a:	2202      	movs	r2, #2
 800194c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	187b      	adds	r3, r7, r1
 8001950:	4a07      	ldr	r2, [pc, #28]	; (8001970 <HAL_TIM_MspPostInit+0x184>)
 8001952:	0019      	movs	r1, r3
 8001954:	0010      	movs	r0, r2
 8001956:	f000 ffbf 	bl	80028d8 <HAL_GPIO_Init>
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b00d      	add	sp, #52	; 0x34
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40002000 	.word	0x40002000
 8001970:	48000400 	.word	0x48000400
 8001974:	40014000 	.word	0x40014000
 8001978:	40014400 	.word	0x40014400

0800197c <TIM_initTimers>:
  }
}

/* USER CODE BEGIN 1 */
void TIM_initTimers(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	// PAN motor
	// H-bridge
	TIM1->CCR1 = 0;
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <TIM_initTimers+0x6c>)
 8001982:	2200      	movs	r2, #0
 8001984:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   // Forward
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <TIM_initTimers+0x70>)
 8001988:	2100      	movs	r1, #0
 800198a:	0018      	movs	r0, r3
 800198c:	f002 f852 	bl	8003a34 <HAL_TIM_PWM_Start>
	TIM1->CCR3 = 0;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <TIM_initTimers+0x6c>)
 8001992:	2200      	movs	r2, #0
 8001994:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	// Reverse
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <TIM_initTimers+0x70>)
 8001998:	2108      	movs	r1, #8
 800199a:	0018      	movs	r0, r3
 800199c:	f002 f84a 	bl	8003a34 <HAL_TIM_PWM_Start>
	// Current Limit
	TIM14->CCR1 = 0;
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <TIM_initTimers+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <TIM_initTimers+0x78>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	0018      	movs	r0, r3
 80019ac:	f002 f842 	bl	8003a34 <HAL_TIM_PWM_Start>
	// TILT motor
	// H-bridge
	TIM15->CCR1 = 0;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <TIM_initTimers+0x7c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);   // Forward
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <TIM_initTimers+0x80>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	0018      	movs	r0, r3
 80019bc:	f002 f83a 	bl	8003a34 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 0;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <TIM_initTimers+0x7c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);	// Reverse
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <TIM_initTimers+0x80>)
 80019c8:	2104      	movs	r1, #4
 80019ca:	0018      	movs	r0, r3
 80019cc:	f002 f832 	bl	8003a34 <HAL_TIM_PWM_Start>
	// Current Limit
	TIM16->CCR1 = 0;
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <TIM_initTimers+0x84>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <TIM_initTimers+0x88>)
 80019d8:	2100      	movs	r1, #0
 80019da:	0018      	movs	r0, r3
 80019dc:	f002 f82a 	bl	8003a34 <HAL_TIM_PWM_Start>
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	40012c00 	.word	0x40012c00
 80019ec:	20000244 	.word	0x20000244
 80019f0:	40002000 	.word	0x40002000
 80019f4:	200002d4 	.word	0x200002d4
 80019f8:	40014000 	.word	0x40014000
 80019fc:	200001b4 	.word	0x200001b4
 8001a00:	40014400 	.word	0x40014400
 8001a04:	2000031c 	.word	0x2000031c

08001a08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <MX_USART2_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a14:	22e1      	movs	r2, #225	; 0xe1
 8001a16:	0252      	lsls	r2, r2, #9
 8001a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <MX_USART2_UART_Init+0x58>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fee1 	bl	8004814 <HAL_UART_Init>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff f963 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000364 	.word	0x20000364
 8001a64:	40004400 	.word	0x40004400

08001a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b08b      	sub	sp, #44	; 0x2c
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	2414      	movs	r4, #20
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	0018      	movs	r0, r3
 8001a76:	2314      	movs	r3, #20
 8001a78:	001a      	movs	r2, r3
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	f003 faec 	bl	8005058 <memset>
  if(uartHandle->Instance==USART2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_UART_MspInit+0x90>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d132      	bne.n	8001af0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0289      	lsls	r1, r1, #10
 8001a94:	430a      	orrs	r2, r1
 8001a96:	61da      	str	r2, [r3, #28]
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001a9a:	69da      	ldr	r2, [r3, #28]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0289      	lsls	r1, r1, #10
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_UART_MspInit+0x94>)
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	0021      	movs	r1, r4
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2202      	movs	r2, #2
 8001ace:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001adc:	187b      	adds	r3, r7, r1
 8001ade:	2201      	movs	r2, #1
 8001ae0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	187a      	adds	r2, r7, r1
 8001ae4:	2390      	movs	r3, #144	; 0x90
 8001ae6:	05db      	lsls	r3, r3, #23
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0018      	movs	r0, r3
 8001aec:	f000 fef4 	bl	80028d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b00b      	add	sp, #44	; 0x2c
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40021000 	.word	0x40021000

08001b00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	; (8001b40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	; (8001b4c <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b2a:	f7ff f9db 	bl	8000ee4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b2e:	f003 fa6f 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7fe fea7 	bl	8000884 <main>

08001b36 <LoopForever>:

LoopForever:
    b LoopForever
 8001b36:	e7fe      	b.n	8001b36 <LoopForever>
  ldr   r0, =_estack
 8001b38:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b44:	080050d4 	.word	0x080050d4
  ldr r2, =_sbss
 8001b48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b4c:	200003ec 	.word	0x200003ec

08001b50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC1_COMP_IRQHandler>
	...

08001b54 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_Init+0x24>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_Init+0x24>)
 8001b5e:	2110      	movs	r1, #16
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f809 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6a:	f7ff f973 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001b86:	681c      	ldr	r4, [r3, #0]
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_InitTick+0x60>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	23fa      	movs	r3, #250	; 0xfa
 8001b90:	0098      	lsls	r0, r3, #2
 8001b92:	f7fe fab9 	bl	8000108 <__udivsi3>
 8001b96:	0003      	movs	r3, r0
 8001b98:	0019      	movs	r1, r3
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	f7fe fab4 	bl	8000108 <__udivsi3>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 fcf3 	bl	800258e <HAL_SYSTICK_Config>
 8001ba8:	1e03      	subs	r3, r0, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e00f      	b.n	8001bd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d80b      	bhi.n	8001bce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	425b      	negs	r3, r3
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f000 fcc0 	bl	8002544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_InitTick+0x64>)
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_IncTick+0x1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	001a      	movs	r2, r3
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	18d2      	adds	r2, r2, r3
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <HAL_IncTick+0x20>)
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000008 	.word	0x20000008
 8001c04:	200003e8 	.word	0x200003e8

08001c08 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_GetTick+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	200003e8 	.word	0x200003e8

08001c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c24:	230f      	movs	r3, #15
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e125      	b.n	8001e86 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10a      	bne.n	8001c58 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2234      	movs	r2, #52	; 0x34
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7fe fb66 	bl	8000324 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d000      	beq.n	8001c64 <HAL_ADC_Init+0x48>
 8001c62:	e103      	b.n	8001e6c <HAL_ADC_Init+0x250>
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_Init+0x54>
 8001c6e:	e0fd      	b.n	8001e6c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2204      	movs	r2, #4
 8001c78:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c7a:	d000      	beq.n	8001c7e <HAL_ADC_Init+0x62>
 8001c7c:	e0f6      	b.n	8001e6c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a83      	ldr	r2, [pc, #524]	; (8001e90 <HAL_ADC_Init+0x274>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	2202      	movs	r2, #2
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2203      	movs	r2, #3
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d112      	bne.n	8001cc2 <HAL_ADC_Init+0xa6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d009      	beq.n	8001cbe <HAL_ADC_Init+0xa2>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_Init+0xa6>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_ADC_Init+0xa8>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2218      	movs	r2, #24
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	0899      	lsrs	r1, r3, #2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4964      	ldr	r1, [pc, #400]	; (8001e94 <HAL_ADC_Init+0x278>)
 8001d02:	400a      	ands	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
 8001d0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7e5b      	ldrb	r3, [r3, #25]
 8001d10:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d12:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7e9b      	ldrb	r3, [r3, #26]
 8001d18:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d002      	beq.n	8001d2a <HAL_ADC_Init+0x10e>
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	e000      	b.n	8001d2c <HAL_ADC_Init+0x110>
 8001d2a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d2c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d32:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_Init+0x124>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e000      	b.n	8001d42 <HAL_ADC_Init+0x126>
 8001d40:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001d42:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2124      	movs	r1, #36	; 0x24
 8001d48:	5c5b      	ldrb	r3, [r3, r1]
 8001d4a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d4c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7edb      	ldrb	r3, [r3, #27]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d115      	bne.n	8001d88 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e9b      	ldrb	r3, [r3, #26]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0252      	lsls	r2, r2, #9
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	e00b      	b.n	8001d88 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d74:	2220      	movs	r2, #32
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	2201      	movs	r2, #1
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	23c2      	movs	r3, #194	; 0xc2
 8001d8e:	33ff      	adds	r3, #255	; 0xff
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d007      	beq.n	8001da4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68d9      	ldr	r1, [r3, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	055b      	lsls	r3, r3, #21
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d01b      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d017      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d013      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d00f      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00b      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d007      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	d003      	beq.n	8001df8 <HAL_ADC_Init+0x1dc>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df4:	2b07      	cmp	r3, #7
 8001df6:	d112      	bne.n	8001e1e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2107      	movs	r1, #7
 8001e04:	438a      	bics	r2, r1
 8001e06:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6959      	ldr	r1, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	2207      	movs	r2, #7
 8001e14:	401a      	ands	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_ADC_Init+0x27c>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d10b      	bne.n	8001e46 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4393      	bics	r3, r2
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e44:	e01c      	b.n	8001e80 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	2212      	movs	r2, #18
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	2210      	movs	r2, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e62:	230f      	movs	r3, #15
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e6a:	e009      	b.n	8001e80 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2210      	movs	r2, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e80:	230f      	movs	r3, #15
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	fffffefd 	.word	0xfffffefd
 8001e94:	fffe0219 	.word	0xfffe0219
 8001e98:	833fffe7 	.word	0x833fffe7

08001e9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea8:	2317      	movs	r3, #23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d15e      	bne.n	8001f7a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2234      	movs	r2, #52	; 0x34
 8001ec0:	5c9b      	ldrb	r3, [r3, r2]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_ADC_Start_DMA+0x2e>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e05e      	b.n	8001f88 <HAL_ADC_Start_DMA+0xec>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2234      	movs	r2, #52	; 0x34
 8001ece:	2101      	movs	r1, #1
 8001ed0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d007      	beq.n	8001eea <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001eda:	2317      	movs	r3, #23
 8001edc:	18fc      	adds	r4, r7, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f000 f97b 	bl	80021dc <ADC_Enable>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001eea:	2317      	movs	r3, #23
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d146      	bne.n	8001f82 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	4a25      	ldr	r2, [pc, #148]	; (8001f90 <HAL_ADC_Start_DMA+0xf4>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	2280      	movs	r2, #128	; 0x80
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2234      	movs	r2, #52	; 0x34
 8001f10:	2100      	movs	r1, #0
 8001f12:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_ADC_Start_DMA+0xf8>)
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <HAL_ADC_Start_DMA+0xfc>)
 8001f22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_ADC_Start_DMA+0x100>)
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	221c      	movs	r2, #28
 8001f32:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2110      	movs	r1, #16
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3340      	adds	r3, #64	; 0x40
 8001f5e:	0019      	movs	r1, r3
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f000 fb68 	bl	8002638 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2104      	movs	r1, #4
 8001f74:	430a      	orrs	r2, r1
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f7a:	2317      	movs	r3, #23
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f82:	2317      	movs	r3, #23
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	781b      	ldrb	r3, [r3, #0]
}
 8001f88:	0018      	movs	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b007      	add	sp, #28
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	fffff0fe 	.word	0xfffff0fe
 8001f94:	080022e5 	.word	0x080022e5
 8001f98:	08002399 	.word	0x08002399
 8001f9c:	080023b7 	.word	0x080023b7

08001fa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fca:	230f      	movs	r3, #15
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fda:	2380      	movs	r3, #128	; 0x80
 8001fdc:	055b      	lsls	r3, r3, #21
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d011      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d00d      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d009      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d005      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d001      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x46>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2234      	movs	r2, #52	; 0x34
 800200a:	5c9b      	ldrb	r3, [r3, r2]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x54>
 8002010:	2302      	movs	r3, #2
 8002012:	e0d0      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1f6>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2234      	movs	r2, #52	; 0x34
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2204      	movs	r2, #4
 8002024:	4013      	ands	r3, r2
 8002026:	d000      	beq.n	800202a <HAL_ADC_ConfigChannel+0x6a>
 8002028:	e0b4      	b.n	8002194 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a64      	ldr	r2, [pc, #400]	; (80021c0 <HAL_ADC_ConfigChannel+0x200>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d100      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x76>
 8002034:	e082      	b.n	800213c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	429a      	cmp	r2, r3
 8002056:	d037      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d033      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b02      	cmp	r3, #2
 8002066:	d02f      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b03      	cmp	r3, #3
 800206e:	d02b      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b04      	cmp	r3, #4
 8002076:	d027      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2b05      	cmp	r3, #5
 800207e:	d023      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	2b06      	cmp	r3, #6
 8002086:	d01f      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	2b07      	cmp	r3, #7
 800208e:	d01b      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2107      	movs	r1, #7
 800209c:	400b      	ands	r3, r1
 800209e:	429a      	cmp	r2, r3
 80020a0:	d012      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2107      	movs	r1, #7
 80020ae:	438a      	bics	r2, r1
 80020b0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2207      	movs	r2, #7
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x120>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d003      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x120>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b12      	cmp	r3, #18
 80020de:	d163      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020e0:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_ADC_ConfigChannel+0x204>)
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d009      	beq.n	8002100 <HAL_ADC_ConfigChannel+0x140>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b11      	cmp	r3, #17
 80020f2:	d102      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x13a>
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	03db      	lsls	r3, r3, #15
 80020f8:	e004      	b.n	8002104 <HAL_ADC_ConfigChannel+0x144>
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	045b      	lsls	r3, r3, #17
 80020fe:	e001      	b.n	8002104 <HAL_ADC_ConfigChannel+0x144>
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	041b      	lsls	r3, r3, #16
 8002104:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <HAL_ADC_ConfigChannel+0x204>)
 8002106:	430b      	orrs	r3, r1
 8002108:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2b10      	cmp	r3, #16
 8002110:	d14a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_ADC_ConfigChannel+0x208>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	492d      	ldr	r1, [pc, #180]	; (80021cc <HAL_ADC_ConfigChannel+0x20c>)
 8002118:	0018      	movs	r0, r3
 800211a:	f7fd fff5 	bl	8000108 <__udivsi3>
 800211e:	0003      	movs	r3, r0
 8002120:	001a      	movs	r2, r3
 8002122:	0013      	movs	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	189b      	adds	r3, r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	3b01      	subs	r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_ConfigChannel+0x16e>
 800213a:	e035      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	4099      	lsls	r1, r3
 800214a:	000b      	movs	r3, r1
 800214c:	43d9      	mvns	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	400a      	ands	r2, r1
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b10      	cmp	r3, #16
 800215c:	d007      	beq.n	800216e <HAL_ADC_ConfigChannel+0x1ae>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b11      	cmp	r3, #17
 8002164:	d003      	beq.n	800216e <HAL_ADC_ConfigChannel+0x1ae>
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b12      	cmp	r3, #18
 800216c:	d11c      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_ADC_ConfigChannel+0x204>)
 8002170:	6819      	ldr	r1, [r3, #0]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d007      	beq.n	800218a <HAL_ADC_ConfigChannel+0x1ca>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b11      	cmp	r3, #17
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x1c6>
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_ADC_ConfigChannel+0x210>)
 8002184:	e002      	b.n	800218c <HAL_ADC_ConfigChannel+0x1cc>
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_ADC_ConfigChannel+0x214>)
 8002188:	e000      	b.n	800218c <HAL_ADC_ConfigChannel+0x1cc>
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_ADC_ConfigChannel+0x218>)
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <HAL_ADC_ConfigChannel+0x204>)
 800218e:	400b      	ands	r3, r1
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e009      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	2220      	movs	r2, #32
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80021a0:	230f      	movs	r3, #15
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2234      	movs	r2, #52	; 0x34
 80021ac:	2100      	movs	r1, #0
 80021ae:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80021b0:	230f      	movs	r3, #15
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	781b      	ldrb	r3, [r3, #0]
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b004      	add	sp, #16
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	00001001 	.word	0x00001001
 80021c4:	40012708 	.word	0x40012708
 80021c8:	20000000 	.word	0x20000000
 80021cc:	000f4240 	.word	0x000f4240
 80021d0:	ffbfffff 	.word	0xffbfffff
 80021d4:	feffffff 	.word	0xfeffffff
 80021d8:	ff7fffff 	.word	0xff7fffff

080021dc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2203      	movs	r2, #3
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d112      	bne.n	8002220 <ADC_Enable+0x44>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	2b01      	cmp	r3, #1
 8002206:	d009      	beq.n	800221c <ADC_Enable+0x40>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	401a      	ands	r2, r3
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	429a      	cmp	r2, r3
 800221a:	d101      	bne.n	8002220 <ADC_Enable+0x44>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <ADC_Enable+0x46>
 8002220:	2300      	movs	r3, #0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d152      	bne.n	80022cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a2a      	ldr	r2, [pc, #168]	; (80022d8 <ADC_Enable+0xfc>)
 800222e:	4013      	ands	r3, r2
 8002230:	d00d      	beq.n	800224e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	2210      	movs	r2, #16
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	2201      	movs	r2, #1
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e03f      	b.n	80022ce <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800225e:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <ADC_Enable+0x100>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	491f      	ldr	r1, [pc, #124]	; (80022e0 <ADC_Enable+0x104>)
 8002264:	0018      	movs	r0, r3
 8002266:	f7fd ff4f 	bl	8000108 <__udivsi3>
 800226a:	0003      	movs	r3, r0
 800226c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800226e:	e002      	b.n	8002276 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	3b01      	subs	r3, #1
 8002274:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800227c:	f7ff fcc4 	bl	8001c08 <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002284:	e01b      	b.n	80022be <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002286:	f7ff fcbf 	bl	8001c08 <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d914      	bls.n	80022be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d00d      	beq.n	80022be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	2210      	movs	r2, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	2201      	movs	r2, #1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1dc      	bne.n	8002286 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	80000017 	.word	0x80000017
 80022dc:	20000000 	.word	0x20000000
 80022e0:	000f4240 	.word	0x000f4240

080022e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	2250      	movs	r2, #80	; 0x50
 80022f8:	4013      	ands	r3, r2
 80022fa:	d140      	bne.n	800237e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d12d      	bne.n	8002374 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800231c:	2b00      	cmp	r3, #0
 800231e:	d129      	bne.n	8002374 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2208      	movs	r2, #8
 8002328:	4013      	ands	r3, r2
 800232a:	2b08      	cmp	r3, #8
 800232c:	d122      	bne.n	8002374 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2204      	movs	r2, #4
 8002336:	4013      	ands	r3, r2
 8002338:	d110      	bne.n	800235c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	210c      	movs	r1, #12
 8002346:	438a      	bics	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	4a11      	ldr	r2, [pc, #68]	; (8002394 <ADC_DMAConvCplt+0xb0>)
 8002350:	4013      	ands	r3, r2
 8002352:	2201      	movs	r2, #1
 8002354:	431a      	orrs	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
 800235a:	e00b      	b.n	8002374 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	2220      	movs	r2, #32
 8002362:	431a      	orrs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	2201      	movs	r2, #1
 800236e:	431a      	orrs	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0018      	movs	r0, r3
 8002378:	f7fe f856 	bl	8000428 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800237c:	e005      	b.n	800238a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	0010      	movs	r0, r2
 8002388:	4798      	blx	r3
}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	46bd      	mov	sp, r7
 800238e:	b004      	add	sp, #16
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	fffffefe 	.word	0xfffffefe

08002398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff fdf9 	bl	8001fa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	2204      	movs	r2, #4
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0018      	movs	r0, r3
 80023e0:	f7ff fde6 	bl	8001fb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}

080023ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	0002      	movs	r2, r0
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b7f      	cmp	r3, #127	; 0x7f
 80023fe:	d809      	bhi.n	8002414 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002400:	1dfb      	adds	r3, r7, #7
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	001a      	movs	r2, r3
 8002406:	231f      	movs	r3, #31
 8002408:	401a      	ands	r2, r3
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <__NVIC_EnableIRQ+0x30>)
 800240c:	2101      	movs	r1, #1
 800240e:	4091      	lsls	r1, r2
 8002410:	000a      	movs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
  }
}
 8002414:	46c0      	nop			; (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}
 800241c:	e000e100 	.word	0xe000e100

08002420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	0002      	movs	r2, r0
 8002428:	6039      	str	r1, [r7, #0]
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b7f      	cmp	r3, #127	; 0x7f
 8002434:	d828      	bhi.n	8002488 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002436:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <__NVIC_SetPriority+0xd4>)
 8002438:	1dfb      	adds	r3, r7, #7
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b25b      	sxtb	r3, r3
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	33c0      	adds	r3, #192	; 0xc0
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	589b      	ldr	r3, [r3, r2]
 8002446:	1dfa      	adds	r2, r7, #7
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	0011      	movs	r1, r2
 800244c:	2203      	movs	r2, #3
 800244e:	400a      	ands	r2, r1
 8002450:	00d2      	lsls	r2, r2, #3
 8002452:	21ff      	movs	r1, #255	; 0xff
 8002454:	4091      	lsls	r1, r2
 8002456:	000a      	movs	r2, r1
 8002458:	43d2      	mvns	r2, r2
 800245a:	401a      	ands	r2, r3
 800245c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	019b      	lsls	r3, r3, #6
 8002462:	22ff      	movs	r2, #255	; 0xff
 8002464:	401a      	ands	r2, r3
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	0018      	movs	r0, r3
 800246c:	2303      	movs	r3, #3
 800246e:	4003      	ands	r3, r0
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002474:	481f      	ldr	r0, [pc, #124]	; (80024f4 <__NVIC_SetPriority+0xd4>)
 8002476:	1dfb      	adds	r3, r7, #7
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b25b      	sxtb	r3, r3
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	430a      	orrs	r2, r1
 8002480:	33c0      	adds	r3, #192	; 0xc0
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002486:	e031      	b.n	80024ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002488:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <__NVIC_SetPriority+0xd8>)
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	0019      	movs	r1, r3
 8002490:	230f      	movs	r3, #15
 8002492:	400b      	ands	r3, r1
 8002494:	3b08      	subs	r3, #8
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3306      	adds	r3, #6
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	3304      	adds	r3, #4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	1dfa      	adds	r2, r7, #7
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	0011      	movs	r1, r2
 80024a8:	2203      	movs	r2, #3
 80024aa:	400a      	ands	r2, r1
 80024ac:	00d2      	lsls	r2, r2, #3
 80024ae:	21ff      	movs	r1, #255	; 0xff
 80024b0:	4091      	lsls	r1, r2
 80024b2:	000a      	movs	r2, r1
 80024b4:	43d2      	mvns	r2, r2
 80024b6:	401a      	ands	r2, r3
 80024b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	22ff      	movs	r2, #255	; 0xff
 80024c0:	401a      	ands	r2, r3
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	0018      	movs	r0, r3
 80024c8:	2303      	movs	r3, #3
 80024ca:	4003      	ands	r3, r0
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d0:	4809      	ldr	r0, [pc, #36]	; (80024f8 <__NVIC_SetPriority+0xd8>)
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	001c      	movs	r4, r3
 80024d8:	230f      	movs	r3, #15
 80024da:	4023      	ands	r3, r4
 80024dc:	3b08      	subs	r3, #8
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	430a      	orrs	r2, r1
 80024e2:	3306      	adds	r3, #6
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	18c3      	adds	r3, r0, r3
 80024e8:	3304      	adds	r3, #4
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	46c0      	nop			; (mov r8, r8)
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b003      	add	sp, #12
 80024f2:	bd90      	pop	{r4, r7, pc}
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	045b      	lsls	r3, r3, #17
 800250c:	429a      	cmp	r2, r3
 800250e:	d301      	bcc.n	8002514 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002510:	2301      	movs	r3, #1
 8002512:	e010      	b.n	8002536 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <SysTick_Config+0x44>)
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	3a01      	subs	r2, #1
 800251a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251c:	2301      	movs	r3, #1
 800251e:	425b      	negs	r3, r3
 8002520:	2103      	movs	r1, #3
 8002522:	0018      	movs	r0, r3
 8002524:	f7ff ff7c 	bl	8002420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <SysTick_Config+0x44>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <SysTick_Config+0x44>)
 8002530:	2207      	movs	r2, #7
 8002532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	e000e010 	.word	0xe000e010

08002544 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	210f      	movs	r1, #15
 8002550:	187b      	adds	r3, r7, r1
 8002552:	1c02      	adds	r2, r0, #0
 8002554:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	187b      	adds	r3, r7, r1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b25b      	sxtb	r3, r3
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff5d 	bl	8002420 <__NVIC_SetPriority>
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	0002      	movs	r2, r0
 8002576:	1dfb      	adds	r3, r7, #7
 8002578:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257a:	1dfb      	adds	r3, r7, #7
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b25b      	sxtb	r3, r3
 8002580:	0018      	movs	r0, r3
 8002582:	f7ff ff33 	bl	80023ec <__NVIC_EnableIRQ>
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff ffaf 	bl	80024fc <SysTick_Config>
 800259e:	0003      	movs	r3, r0
}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e036      	b.n	800262c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2221      	movs	r2, #33	; 0x21
 80025c2:	2102      	movs	r1, #2
 80025c4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a18      	ldr	r2, [pc, #96]	; (8002634 <HAL_DMA_Init+0x8c>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 f946 	bl	80028a0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2221      	movs	r2, #33	; 0x21
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}  
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b004      	add	sp, #16
 8002632:	bd80      	pop	{r7, pc}
 8002634:	ffffc00f 	.word	0xffffc00f

08002638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002646:	2317      	movs	r3, #23
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	5c9b      	ldrb	r3, [r3, r2]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_DMA_Start_IT+0x24>
 8002658:	2302      	movs	r3, #2
 800265a:	e04f      	b.n	80026fc <HAL_DMA_Start_IT+0xc4>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	2101      	movs	r1, #1
 8002662:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2221      	movs	r2, #33	; 0x21
 8002668:	5c9b      	ldrb	r3, [r3, r2]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d13a      	bne.n	80026e6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	2102      	movs	r1, #2
 8002676:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	438a      	bics	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f8d7 	bl	8002848 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	210e      	movs	r1, #14
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e00f      	b.n	80026d4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	210a      	movs	r1, #10
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2104      	movs	r1, #4
 80026d0:	438a      	bics	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e007      	b.n	80026f6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	2100      	movs	r1, #0
 80026ec:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80026ee:	2317      	movs	r3, #23
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80026f6:	2317      	movs	r3, #23
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
} 
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b006      	add	sp, #24
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	0013      	movs	r3, r2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4013      	ands	r3, r2
 800272a:	d024      	beq.n	8002776 <HAL_DMA_IRQHandler+0x72>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2204      	movs	r2, #4
 8002730:	4013      	ands	r3, r2
 8002732:	d020      	beq.n	8002776 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2220      	movs	r2, #32
 800273c:	4013      	ands	r3, r2
 800273e:	d107      	bne.n	8002750 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2104      	movs	r1, #4
 800274c:	438a      	bics	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	2104      	movs	r1, #4
 800275a:	4091      	lsls	r1, r2
 800275c:	000a      	movs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	d100      	bne.n	800276a <HAL_DMA_IRQHandler+0x66>
 8002768:	e06a      	b.n	8002840 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	0010      	movs	r0, r2
 8002772:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002774:	e064      	b.n	8002840 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2202      	movs	r2, #2
 800277c:	409a      	lsls	r2, r3
 800277e:	0013      	movs	r3, r2
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	d02b      	beq.n	80027de <HAL_DMA_IRQHandler+0xda>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2202      	movs	r2, #2
 800278a:	4013      	ands	r3, r2
 800278c:	d027      	beq.n	80027de <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2220      	movs	r2, #32
 8002796:	4013      	ands	r3, r2
 8002798:	d10b      	bne.n	80027b2 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	210a      	movs	r1, #10
 80027a6:	438a      	bics	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2221      	movs	r2, #33	; 0x21
 80027ae:	2101      	movs	r1, #1
 80027b0:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2102      	movs	r1, #2
 80027bc:	4091      	lsls	r1, r2
 80027be:	000a      	movs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	0010      	movs	r0, r2
 80027da:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80027dc:	e030      	b.n	8002840 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2208      	movs	r2, #8
 80027e4:	409a      	lsls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4013      	ands	r3, r2
 80027ec:	d028      	beq.n	8002840 <HAL_DMA_IRQHandler+0x13c>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2208      	movs	r2, #8
 80027f2:	4013      	ands	r3, r2
 80027f4:	d024      	beq.n	8002840 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	210e      	movs	r1, #14
 8002802:	438a      	bics	r2, r1
 8002804:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	2101      	movs	r1, #1
 8002810:	4091      	lsls	r1, r2
 8002812:	000a      	movs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2221      	movs	r2, #33	; 0x21
 8002820:	2101      	movs	r1, #1
 8002822:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	0010      	movs	r0, r2
 800283c:	4798      	blx	r3
    }
   }
}  
 800283e:	e7ff      	b.n	8002840 <HAL_DMA_IRQHandler+0x13c>
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}

08002848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2101      	movs	r1, #1
 8002860:	4091      	lsls	r1, r2
 8002862:	000a      	movs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b10      	cmp	r3, #16
 8002874:	d108      	bne.n	8002888 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002886:	e007      	b.n	8002898 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	60da      	str	r2, [r3, #12]
}
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	46bd      	mov	sp, r7
 800289c:	b004      	add	sp, #16
 800289e:	bd80      	pop	{r7, pc}

080028a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <DMA_CalcBaseAndBitshift+0x30>)
 80028ae:	4694      	mov	ip, r2
 80028b0:	4463      	add	r3, ip
 80028b2:	2114      	movs	r1, #20
 80028b4:	0018      	movs	r0, r3
 80028b6:	f7fd fc27 	bl	8000108 <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	009a      	lsls	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <DMA_CalcBaseAndBitshift+0x34>)
 80028c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	bffdfff8 	.word	0xbffdfff8
 80028d4:	40020000 	.word	0x40020000

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e6:	e14f      	b.n	8002b88 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2101      	movs	r1, #1
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4091      	lsls	r1, r2
 80028f2:	000a      	movs	r2, r1
 80028f4:	4013      	ands	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d100      	bne.n	8002900 <HAL_GPIO_Init+0x28>
 80028fe:	e140      	b.n	8002b82 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2203      	movs	r2, #3
 8002906:	4013      	ands	r3, r2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d005      	beq.n	8002918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002914:	2b02      	cmp	r3, #2
 8002916:	d130      	bne.n	800297a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	409a      	lsls	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	43da      	mvns	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800294e:	2201      	movs	r2, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	409a      	lsls	r2, r3
 8002954:	0013      	movs	r3, r2
 8002956:	43da      	mvns	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	2201      	movs	r2, #1
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
 800296c:	0013      	movs	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	4013      	ands	r3, r2
 8002982:	2b03      	cmp	r3, #3
 8002984:	d017      	beq.n	80029b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	43da      	mvns	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	409a      	lsls	r2, r3
 80029a8:	0013      	movs	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2203      	movs	r2, #3
 80029bc:	4013      	ands	r3, r2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d123      	bne.n	8002a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	0092      	lsls	r2, r2, #2
 80029cc:	58d3      	ldr	r3, [r2, r3]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4013      	ands	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	220f      	movs	r2, #15
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	43da      	mvns	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2107      	movs	r1, #7
 80029ee:	400b      	ands	r3, r1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	6939      	ldr	r1, [r7, #16]
 8002a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	409a      	lsls	r2, r3
 8002a18:	0013      	movs	r3, r2
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2203      	movs	r2, #3
 8002a28:	401a      	ands	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	409a      	lsls	r2, r3
 8002a30:	0013      	movs	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	23c0      	movs	r3, #192	; 0xc0
 8002a44:	029b      	lsls	r3, r3, #10
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_GPIO_Init+0x174>
 8002a4a:	e09a      	b.n	8002b82 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	4b54      	ldr	r3, [pc, #336]	; (8002ba0 <HAL_GPIO_Init+0x2c8>)
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	4b53      	ldr	r3, [pc, #332]	; (8002ba0 <HAL_GPIO_Init+0x2c8>)
 8002a52:	2101      	movs	r1, #1
 8002a54:	430a      	orrs	r2, r1
 8002a56:	619a      	str	r2, [r3, #24]
 8002a58:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_GPIO_Init+0x2c8>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a64:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_GPIO_Init+0x2cc>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	589b      	ldr	r3, [r3, r2]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2203      	movs	r2, #3
 8002a76:	4013      	ands	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	0013      	movs	r3, r2
 8002a80:	43da      	mvns	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	2390      	movs	r3, #144	; 0x90
 8002a8c:	05db      	lsls	r3, r3, #23
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d013      	beq.n	8002aba <HAL_GPIO_Init+0x1e2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a44      	ldr	r2, [pc, #272]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00d      	beq.n	8002ab6 <HAL_GPIO_Init+0x1de>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a43      	ldr	r2, [pc, #268]	; (8002bac <HAL_GPIO_Init+0x2d4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x1da>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_GPIO_Init+0x2d8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d101      	bne.n	8002aae <HAL_GPIO_Init+0x1d6>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e006      	b.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e004      	b.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002aba:	2300      	movs	r3, #0
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	2103      	movs	r1, #3
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	0092      	lsls	r2, r2, #2
 8002ac4:	4093      	lsls	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002acc:	4935      	ldr	r1, [pc, #212]	; (8002ba4 <HAL_GPIO_Init+0x2cc>)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	3302      	adds	r3, #2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	025b      	lsls	r3, r3, #9
 8002af2:	4013      	ands	r3, r2
 8002af4:	d003      	beq.n	8002afe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002afe:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b28:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2e:	4b21      	ldr	r3, [pc, #132]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	43da      	mvns	r2, r3
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	035b      	lsls	r3, r3, #13
 8002b46:	4013      	ands	r3, r2
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b52:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b58:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	43da      	mvns	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4013      	ands	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	039b      	lsls	r3, r3, #14
 8002b70:	4013      	ands	r3, r2
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b7c:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_GPIO_Init+0x2dc>)
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	40da      	lsrs	r2, r3
 8002b90:	1e13      	subs	r3, r2, #0
 8002b92:	d000      	beq.n	8002b96 <HAL_GPIO_Init+0x2be>
 8002b94:	e6a8      	b.n	80028e8 <HAL_GPIO_Init+0x10>
  } 
}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b006      	add	sp, #24
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	48000c00 	.word	0x48000c00
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	0008      	movs	r0, r1
 8002bc2:	0011      	movs	r1, r2
 8002bc4:	1cbb      	adds	r3, r7, #2
 8002bc6:	1c02      	adds	r2, r0, #0
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	1c7b      	adds	r3, r7, #1
 8002bcc:	1c0a      	adds	r2, r1, #0
 8002bce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bd0:	1c7b      	adds	r3, r7, #1
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bd8:	1cbb      	adds	r3, r7, #2
 8002bda:	881a      	ldrh	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002be2:	1cbb      	adds	r3, r7, #2
 8002be4:	881a      	ldrh	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b002      	add	sp, #8
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e082      	b.n	8002d0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2241      	movs	r2, #65	; 0x41
 8002c0a:	5c9b      	ldrb	r3, [r3, r2]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2240      	movs	r2, #64	; 0x40
 8002c16:	2100      	movs	r1, #0
 8002c18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fd fde3 	bl	80007e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2241      	movs	r2, #65	; 0x41
 8002c26:	2124      	movs	r1, #36	; 0x24
 8002c28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	438a      	bics	r2, r1
 8002c38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4934      	ldr	r1, [pc, #208]	; (8002d14 <HAL_I2C_Init+0x120>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4931      	ldr	r1, [pc, #196]	; (8002d18 <HAL_I2C_Init+0x124>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d108      	bne.n	8002c72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2180      	movs	r1, #128	; 0x80
 8002c6a:	0209      	lsls	r1, r1, #8
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	e007      	b.n	8002c82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2184      	movs	r1, #132	; 0x84
 8002c7c:	0209      	lsls	r1, r1, #8
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d104      	bne.n	8002c94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	491f      	ldr	r1, [pc, #124]	; (8002d1c <HAL_I2C_Init+0x128>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	491a      	ldr	r1, [pc, #104]	; (8002d18 <HAL_I2C_Init+0x124>)
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69d9      	ldr	r1, [r3, #28]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1a      	ldr	r2, [r3, #32]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2101      	movs	r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2241      	movs	r2, #65	; 0x41
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2242      	movs	r2, #66	; 0x42
 8002d06:	2100      	movs	r1, #0
 8002d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b002      	add	sp, #8
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	f0ffffff 	.word	0xf0ffffff
 8002d18:	ffff7fff 	.word	0xffff7fff
 8002d1c:	02008000 	.word	0x02008000

08002d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2241      	movs	r2, #65	; 0x41
 8002d2e:	5c9b      	ldrb	r3, [r3, r2]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b20      	cmp	r3, #32
 8002d34:	d138      	bne.n	8002da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	5c9b      	ldrb	r3, [r3, r2]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e032      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	2101      	movs	r1, #1
 8002d4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2241      	movs	r2, #65	; 0x41
 8002d50:	2124      	movs	r1, #36	; 0x24
 8002d52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2101      	movs	r1, #1
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4911      	ldr	r1, [pc, #68]	; (8002db4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2101      	movs	r1, #1
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2240      	movs	r2, #64	; 0x40
 8002da0:	2100      	movs	r1, #0
 8002da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	ffffefff 	.word	0xffffefff

08002db8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2241      	movs	r2, #65	; 0x41
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d139      	bne.n	8002e42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2240      	movs	r2, #64	; 0x40
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e033      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	2101      	movs	r1, #1
 8002de2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2241      	movs	r2, #65	; 0x41
 8002de8:	2124      	movs	r1, #36	; 0x24
 8002dea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2241      	movs	r2, #65	; 0x41
 8002e32:	2120      	movs	r1, #32
 8002e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2240      	movs	r2, #64	; 0x40
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b004      	add	sp, #16
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	fffff0ff 	.word	0xfffff0ff

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e301      	b.n	8003466 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x1e>
 8002e6c:	e08d      	b.n	8002f8a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e6e:	4bc3      	ldr	r3, [pc, #780]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	220c      	movs	r2, #12
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00e      	beq.n	8002e98 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e7a:	4bc0      	ldr	r3, [pc, #768]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	220c      	movs	r2, #12
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d116      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x64>
 8002e86:	4bbd      	ldr	r3, [pc, #756]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	401a      	ands	r2, r3
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	025b      	lsls	r3, r3, #9
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e98:	4bb8      	ldr	r3, [pc, #736]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x56>
 8002ea4:	e070      	b.n	8002f88 <HAL_RCC_OscConfig+0x138>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d000      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x60>
 8002eae:	e06b      	b.n	8002f88 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e2d8      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x7c>
 8002ebc:	4baf      	ldr	r3, [pc, #700]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4bae      	ldr	r3, [pc, #696]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	2180      	movs	r1, #128	; 0x80
 8002ec4:	0249      	lsls	r1, r1, #9
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e02f      	b.n	8002f2c <HAL_RCC_OscConfig+0xdc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10c      	bne.n	8002eee <HAL_RCC_OscConfig+0x9e>
 8002ed4:	4ba9      	ldr	r3, [pc, #676]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4ba8      	ldr	r3, [pc, #672]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002eda:	49a9      	ldr	r1, [pc, #676]	; (8003180 <HAL_RCC_OscConfig+0x330>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	4ba6      	ldr	r3, [pc, #664]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4ba5      	ldr	r3, [pc, #660]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ee6:	49a7      	ldr	r1, [pc, #668]	; (8003184 <HAL_RCC_OscConfig+0x334>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e01e      	b.n	8002f2c <HAL_RCC_OscConfig+0xdc>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d10e      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc4>
 8002ef6:	4ba1      	ldr	r3, [pc, #644]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	02c9      	lsls	r1, r1, #11
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b9d      	ldr	r3, [pc, #628]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b9c      	ldr	r3, [pc, #624]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	0249      	lsls	r1, r1, #9
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xdc>
 8002f14:	4b99      	ldr	r3, [pc, #612]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	4b98      	ldr	r3, [pc, #608]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	4999      	ldr	r1, [pc, #612]	; (8003180 <HAL_RCC_OscConfig+0x330>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b96      	ldr	r3, [pc, #600]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b95      	ldr	r3, [pc, #596]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f26:	4997      	ldr	r1, [pc, #604]	; (8003184 <HAL_RCC_OscConfig+0x334>)
 8002f28:	400a      	ands	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d014      	beq.n	8002f5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fe68 	bl	8001c08 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fe63 	bl	8001c08 <HAL_GetTick>
 8002f42:	0002      	movs	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e28a      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f50:	4b8a      	ldr	r3, [pc, #552]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	029b      	lsls	r3, r3, #10
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0xee>
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fe53 	bl	8001c08 <HAL_GetTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fe4e 	bl	8001c08 <HAL_GetTick>
 8002f6c:	0002      	movs	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e275      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	4b80      	ldr	r3, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	029b      	lsls	r3, r3, #10
 8002f82:	4013      	ands	r3, r2
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x118>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	d100      	bne.n	8002f96 <HAL_RCC_OscConfig+0x146>
 8002f94:	e069      	b.n	800306a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f96:	4b79      	ldr	r3, [pc, #484]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fa0:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11c      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x196>
 8002fac:	4b73      	ldr	r3, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d116      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e24b      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	22f8      	movs	r2, #248	; 0xf8
 8002fd4:	4393      	bics	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00da      	lsls	r2, r3, #3
 8002fde:	4b67      	ldr	r3, [pc, #412]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe4:	e041      	b.n	800306a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d024      	beq.n	8003038 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fe05 	bl	8001c08 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003004:	f7fe fe00 	bl	8001c08 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e227      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2202      	movs	r2, #2
 800301c:	4013      	ands	r3, r2
 800301e:	d0f1      	beq.n	8003004 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	22f8      	movs	r2, #248	; 0xf8
 8003026:	4393      	bics	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00da      	lsls	r2, r3, #3
 8003030:	4b52      	ldr	r3, [pc, #328]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e018      	b.n	800306a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 800303e:	2101      	movs	r1, #1
 8003040:	438a      	bics	r2, r1
 8003042:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fde0 	bl	8001c08 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fddb 	bl	8001c08 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e202      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003060:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2202      	movs	r2, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d1f1      	bne.n	800304e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2208      	movs	r2, #8
 8003070:	4013      	ands	r3, r2
 8003072:	d036      	beq.n	80030e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69db      	ldr	r3, [r3, #28]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d019      	beq.n	80030b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 800307e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003082:	2101      	movs	r1, #1
 8003084:	430a      	orrs	r2, r1
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003088:	f7fe fdbe 	bl	8001c08 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003092:	f7fe fdb9 	bl	8001c08 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1e0      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	2202      	movs	r2, #2
 80030aa:	4013      	ands	r3, r2
 80030ac:	d0f1      	beq.n	8003092 <HAL_RCC_OscConfig+0x242>
 80030ae:	e018      	b.n	80030e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 80030b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b4:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	438a      	bics	r2, r1
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030bc:	f7fe fda4 	bl	8001c08 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c6:	f7fe fd9f 	bl	8001c08 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1c6      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2202      	movs	r2, #2
 80030de:	4013      	ands	r3, r2
 80030e0:	d1f1      	bne.n	80030c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	4013      	ands	r3, r2
 80030ea:	d100      	bne.n	80030ee <HAL_RCC_OscConfig+0x29e>
 80030ec:	e0b4      	b.n	8003258 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ee:	201f      	movs	r0, #31
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030f6:	4b21      	ldr	r3, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 80030f8:	69da      	ldr	r2, [r3, #28]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	055b      	lsls	r3, r3, #21
 80030fe:	4013      	ands	r3, r2
 8003100:	d110      	bne.n	8003124 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003102:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003104:	69da      	ldr	r2, [r3, #28]
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0549      	lsls	r1, r1, #21
 800310c:	430a      	orrs	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003112:	69da      	ldr	r2, [r3, #28]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	055b      	lsls	r3, r3, #21
 8003118:	4013      	ands	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800311e:	183b      	adds	r3, r7, r0
 8003120:	2201      	movs	r2, #1
 8003122:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <HAL_RCC_OscConfig+0x338>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2380      	movs	r3, #128	; 0x80
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4013      	ands	r3, r2
 800312e:	d11a      	bne.n	8003166 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <HAL_RCC_OscConfig+0x338>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <HAL_RCC_OscConfig+0x338>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0049      	lsls	r1, r1, #1
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313e:	f7fe fd63 	bl	8001c08 <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe fd5e 	bl	8001c08 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e185      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x338>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4013      	ands	r3, r2
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10e      	bne.n	800318c <HAL_RCC_OscConfig+0x33c>
 800316e:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	4b02      	ldr	r3, [pc, #8]	; (800317c <HAL_RCC_OscConfig+0x32c>)
 8003174:	2101      	movs	r1, #1
 8003176:	430a      	orrs	r2, r1
 8003178:	621a      	str	r2, [r3, #32]
 800317a:	e035      	b.n	80031e8 <HAL_RCC_OscConfig+0x398>
 800317c:	40021000 	.word	0x40021000
 8003180:	fffeffff 	.word	0xfffeffff
 8003184:	fffbffff 	.word	0xfffbffff
 8003188:	40007000 	.word	0x40007000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10c      	bne.n	80031ae <HAL_RCC_OscConfig+0x35e>
 8003194:	4bb6      	ldr	r3, [pc, #728]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	4bb5      	ldr	r3, [pc, #724]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800319a:	2101      	movs	r1, #1
 800319c:	438a      	bics	r2, r1
 800319e:	621a      	str	r2, [r3, #32]
 80031a0:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	4bb2      	ldr	r3, [pc, #712]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031a6:	2104      	movs	r1, #4
 80031a8:	438a      	bics	r2, r1
 80031aa:	621a      	str	r2, [r3, #32]
 80031ac:	e01c      	b.n	80031e8 <HAL_RCC_OscConfig+0x398>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x380>
 80031b6:	4bae      	ldr	r3, [pc, #696]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031b8:	6a1a      	ldr	r2, [r3, #32]
 80031ba:	4bad      	ldr	r3, [pc, #692]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031bc:	2104      	movs	r1, #4
 80031be:	430a      	orrs	r2, r1
 80031c0:	621a      	str	r2, [r3, #32]
 80031c2:	4bab      	ldr	r3, [pc, #684]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	4baa      	ldr	r3, [pc, #680]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031c8:	2101      	movs	r1, #1
 80031ca:	430a      	orrs	r2, r1
 80031cc:	621a      	str	r2, [r3, #32]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x398>
 80031d0:	4ba7      	ldr	r3, [pc, #668]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031d2:	6a1a      	ldr	r2, [r3, #32]
 80031d4:	4ba6      	ldr	r3, [pc, #664]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031d6:	2101      	movs	r1, #1
 80031d8:	438a      	bics	r2, r1
 80031da:	621a      	str	r2, [r3, #32]
 80031dc:	4ba4      	ldr	r3, [pc, #656]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	4ba3      	ldr	r3, [pc, #652]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80031e2:	2104      	movs	r1, #4
 80031e4:	438a      	bics	r2, r1
 80031e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d014      	beq.n	800321a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031f0:	f7fe fd0a 	bl	8001c08 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	e009      	b.n	800320e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031fa:	f7fe fd05 	bl	8001c08 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a9b      	ldr	r2, [pc, #620]	; (8003474 <HAL_RCC_OscConfig+0x624>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e12b      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	4b98      	ldr	r3, [pc, #608]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	2202      	movs	r2, #2
 8003214:	4013      	ands	r3, r2
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x3aa>
 8003218:	e013      	b.n	8003242 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe fcf5 	bl	8001c08 <HAL_GetTick>
 800321e:	0003      	movs	r3, r0
 8003220:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	e009      	b.n	8003238 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe fcf0 	bl	8001c08 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	4a91      	ldr	r2, [pc, #580]	; (8003474 <HAL_RCC_OscConfig+0x624>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e116      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b8d      	ldr	r3, [pc, #564]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	2202      	movs	r2, #2
 800323e:	4013      	ands	r3, r2
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003242:	231f      	movs	r3, #31
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	4b87      	ldr	r3, [pc, #540]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003252:	4989      	ldr	r1, [pc, #548]	; (8003478 <HAL_RCC_OscConfig+0x628>)
 8003254:	400a      	ands	r2, r1
 8003256:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2210      	movs	r2, #16
 800325e:	4013      	ands	r3, r2
 8003260:	d063      	beq.n	800332a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d12a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800326a:	4b81      	ldr	r3, [pc, #516]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800326c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326e:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003270:	2104      	movs	r1, #4
 8003272:	430a      	orrs	r2, r1
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327a:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800327c:	2101      	movs	r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7fe fcc1 	bl	8001c08 <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800328c:	f7fe fcbc 	bl	8001c08 <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0e3      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800329e:	4b74      	ldr	r3, [pc, #464]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a2:	2202      	movs	r2, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d0f1      	beq.n	800328c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032a8:	4b71      	ldr	r3, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ac:	22f8      	movs	r2, #248	; 0xf8
 80032ae:	4393      	bics	r3, r2
 80032b0:	0019      	movs	r1, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	00da      	lsls	r2, r3, #3
 80032b8:	4b6d      	ldr	r3, [pc, #436]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
 80032be:	e034      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	3305      	adds	r3, #5
 80032c6:	d111      	bne.n	80032ec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032ce:	2104      	movs	r1, #4
 80032d0:	438a      	bics	r2, r1
 80032d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	22f8      	movs	r2, #248	; 0xf8
 80032da:	4393      	bics	r3, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	00da      	lsls	r2, r3, #3
 80032e4:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ea:	e01e      	b.n	800332a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f0:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032f2:	2104      	movs	r1, #4
 80032f4:	430a      	orrs	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032f8:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fc:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fe fc80 	bl	8001c08 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800330e:	f7fe fc7b 	bl	8001c08 <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0a2      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003320:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d1f1      	bne.n	800330e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d100      	bne.n	8003334 <HAL_RCC_OscConfig+0x4e4>
 8003332:	e097      	b.n	8003464 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003334:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	220c      	movs	r2, #12
 800333a:	4013      	ands	r3, r2
 800333c:	2b08      	cmp	r3, #8
 800333e:	d100      	bne.n	8003342 <HAL_RCC_OscConfig+0x4f2>
 8003340:	e06b      	b.n	800341a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d14c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b48      	ldr	r3, [pc, #288]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003350:	494a      	ldr	r1, [pc, #296]	; (800347c <HAL_RCC_OscConfig+0x62c>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003356:	f7fe fc57 	bl	8001c08 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe fc52 	bl	8001c08 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e079      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	049b      	lsls	r3, r3, #18
 800337a:	4013      	ands	r3, r2
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337e:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	220f      	movs	r2, #15
 8003384:	4393      	bics	r3, r2
 8003386:	0019      	movs	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338c:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800338e:	430a      	orrs	r2, r1
 8003390:	62da      	str	r2, [r3, #44]	; 0x2c
 8003392:	4b37      	ldr	r3, [pc, #220]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_RCC_OscConfig+0x630>)
 8003398:	4013      	ands	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	431a      	orrs	r2, r3
 80033a6:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0449      	lsls	r1, r1, #17
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fe fc25 	bl	8001c08 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fc20 	bl	8001c08 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e047      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d6:	4b26      	ldr	r3, [pc, #152]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	049b      	lsls	r3, r3, #18
 80033de:	4013      	ands	r3, r2
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x574>
 80033e2:	e03f      	b.n	8003464 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b21      	ldr	r3, [pc, #132]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 80033ea:	4924      	ldr	r1, [pc, #144]	; (800347c <HAL_RCC_OscConfig+0x62c>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f0:	f7fe fc0a 	bl	8001c08 <HAL_GetTick>
 80033f4:	0003      	movs	r3, r0
 80033f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe fc05 	bl	8001c08 <HAL_GetTick>
 80033fe:	0002      	movs	r2, r0
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e02c      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800340c:	4b18      	ldr	r3, [pc, #96]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	049b      	lsls	r3, r3, #18
 8003414:	4013      	ands	r3, r2
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x5aa>
 8003418:	e024      	b.n	8003464 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e01f      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003426:	4b12      	ldr	r3, [pc, #72]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x620>)
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	2380      	movs	r3, #128	; 0x80
 8003436:	025b      	lsls	r3, r3, #9
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	429a      	cmp	r2, r3
 8003440:	d10e      	bne.n	8003460 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	220f      	movs	r2, #15
 8003446:	401a      	ands	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	23f0      	movs	r3, #240	; 0xf0
 8003454:	039b      	lsls	r3, r3, #14
 8003456:	401a      	ands	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b008      	add	sp, #32
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	40021000 	.word	0x40021000
 8003474:	00001388 	.word	0x00001388
 8003478:	efffffff 	.word	0xefffffff
 800347c:	feffffff 	.word	0xfeffffff
 8003480:	ffc2ffff 	.word	0xffc2ffff

08003484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b3      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b5b      	ldr	r3, [pc, #364]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2201      	movs	r2, #1
 800349e:	4013      	ands	r3, r2
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d911      	bls.n	80034ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4393      	bics	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	4b55      	ldr	r3, [pc, #340]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b8:	4b53      	ldr	r3, [pc, #332]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e09a      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2202      	movs	r2, #2
 80034d0:	4013      	ands	r3, r2
 80034d2:	d015      	beq.n	8003500 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2204      	movs	r2, #4
 80034da:	4013      	ands	r3, r2
 80034dc:	d006      	beq.n	80034ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034de:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80034e4:	21e0      	movs	r1, #224	; 0xe0
 80034e6:	00c9      	lsls	r1, r1, #3
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	22f0      	movs	r2, #240	; 0xf0
 80034f2:	4393      	bics	r3, r2
 80034f4:	0019      	movs	r1, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	4013      	ands	r3, r2
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	4013      	ands	r3, r2
 800351c:	d114      	bne.n	8003548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06e      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	049b      	lsls	r3, r3, #18
 8003532:	4013      	ands	r3, r2
 8003534:	d108      	bne.n	8003548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e062      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2202      	movs	r2, #2
 8003540:	4013      	ands	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e05b      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2203      	movs	r2, #3
 800354e:	4393      	bics	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4b2d      	ldr	r3, [pc, #180]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355c:	f7fe fb54 	bl	8001c08 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	e009      	b.n	800357a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003566:	f7fe fb4f 	bl	8001c08 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <HAL_RCC_ClockConfig+0x18c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e042      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	220c      	movs	r2, #12
 8003580:	401a      	ands	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1ec      	bne.n	8003566 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d211      	bcs.n	80035be <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2201      	movs	r2, #1
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ac:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_RCC_ClockConfig+0x184>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d001      	beq.n	80035be <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e020      	b.n	8003600 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2204      	movs	r2, #4
 80035c4:	4013      	ands	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b10      	ldr	r3, [pc, #64]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_RCC_ClockConfig+0x190>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4b0d      	ldr	r3, [pc, #52]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035dc:	f000 f820 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_ClockConfig+0x188>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	220f      	movs	r2, #15
 80035ea:	4013      	ands	r3, r2
 80035ec:	4a0a      	ldr	r2, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x194>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	000a      	movs	r2, r1
 80035f2:	40da      	lsrs	r2, r3
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x198>)
 80035f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035f8:	2003      	movs	r0, #3
 80035fa:	f7fe fabf 	bl	8001b7c <HAL_InitTick>
  
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b004      	add	sp, #16
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40022000 	.word	0x40022000
 800360c:	40021000 	.word	0x40021000
 8003610:	00001388 	.word	0x00001388
 8003614:	fffff8ff 	.word	0xfffff8ff
 8003618:	080050b4 	.word	0x080050b4
 800361c:	20000000 	.word	0x20000000

08003620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b08f      	sub	sp, #60	; 0x3c
 8003624:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003626:	2314      	movs	r3, #20
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800362c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800362e:	c313      	stmia	r3!, {r0, r1, r4}
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003638:	ca13      	ldmia	r2!, {r0, r1, r4}
 800363a:	c313      	stmia	r3!, {r0, r1, r4}
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003644:	2300      	movs	r3, #0
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
 8003648:	2300      	movs	r3, #0
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003654:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	220c      	movs	r2, #12
 800365e:	4013      	ands	r3, r2
 8003660:	2b04      	cmp	r3, #4
 8003662:	d002      	beq.n	800366a <HAL_RCC_GetSysClockFreq+0x4a>
 8003664:	2b08      	cmp	r3, #8
 8003666:	d003      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x50>
 8003668:	e02d      	b.n	80036c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800366a:	4b1e      	ldr	r3, [pc, #120]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800366e:	e02d      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	220f      	movs	r2, #15
 8003676:	4013      	ands	r3, r2
 8003678:	2214      	movs	r2, #20
 800367a:	18ba      	adds	r2, r7, r2
 800367c:	5cd3      	ldrb	r3, [r2, r3]
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003680:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	220f      	movs	r2, #15
 8003686:	4013      	ands	r3, r2
 8003688:	1d3a      	adds	r2, r7, #4
 800368a:	5cd3      	ldrb	r3, [r2, r3]
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	4013      	ands	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369a:	4812      	ldr	r0, [pc, #72]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800369c:	f7fc fd34 	bl	8000108 <__udivsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	001a      	movs	r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	4353      	muls	r3, r2
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	e009      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80036ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ae:	000a      	movs	r2, r1
 80036b0:	0152      	lsls	r2, r2, #5
 80036b2:	1a52      	subs	r2, r2, r1
 80036b4:	0193      	lsls	r3, r2, #6
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	185b      	adds	r3, r3, r1
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036c4:	e002      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80036ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00f      	add	sp, #60	; 0x3c
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	08005094 	.word	0x08005094
 80036dc:	080050a4 	.word	0x080050a4
 80036e0:	40021000 	.word	0x40021000
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b02      	ldr	r3, [pc, #8]	; (80036f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20000000 	.word	0x20000000

080036fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003700:	f7ff fff2 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003704:	0001      	movs	r1, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	2207      	movs	r2, #7
 800370e:	4013      	ands	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	40d9      	lsrs	r1, r3
 8003716:	000b      	movs	r3, r1
}    
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	080050c4 	.word	0x080050c4

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	025b      	lsls	r3, r3, #9
 8003740:	4013      	ands	r3, r2
 8003742:	d100      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003744:	e08e      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2017      	movs	r0, #23
 8003748:	183b      	adds	r3, r7, r0
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b5f      	ldr	r3, [pc, #380]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	055b      	lsls	r3, r3, #21
 8003756:	4013      	ands	r3, r2
 8003758:	d110      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b5c      	ldr	r3, [pc, #368]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	0549      	lsls	r1, r1, #21
 8003764:	430a      	orrs	r2, r1
 8003766:	61da      	str	r2, [r3, #28]
 8003768:	4b58      	ldr	r3, [pc, #352]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	055b      	lsls	r3, r3, #21
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003776:	183b      	adds	r3, r7, r0
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d11a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003788:	4b51      	ldr	r3, [pc, #324]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800378e:	2180      	movs	r1, #128	; 0x80
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe fa37 	bl	8001c08 <HAL_GetTick>
 800379a:	0003      	movs	r3, r0
 800379c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a0:	f7fe fa32 	bl	8001c08 <HAL_GetTick>
 80037a4:	0002      	movs	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e087      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	2380      	movs	r3, #128	; 0x80
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037be:	4b43      	ldr	r3, [pc, #268]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	23c0      	movs	r3, #192	; 0xc0
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4013      	ands	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d034      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d02c      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e0:	4b3a      	ldr	r3, [pc, #232]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037ea:	4b38      	ldr	r3, [pc, #224]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	4b37      	ldr	r3, [pc, #220]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037f0:	2180      	movs	r1, #128	; 0x80
 80037f2:	0249      	lsls	r1, r1, #9
 80037f4:	430a      	orrs	r2, r1
 80037f6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037fa:	6a1a      	ldr	r2, [r3, #32]
 80037fc:	4b33      	ldr	r3, [pc, #204]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003800:	400a      	ands	r2, r1
 8003802:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	4013      	ands	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe f9f9 	bl	8001c08 <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe f9f4 	bl	8001c08 <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	4a2d      	ldr	r2, [pc, #180]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d901      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e048      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2202      	movs	r2, #2
 8003836:	4013      	ands	r3, r2
 8003838:	d0f0      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	4a25      	ldr	r2, [pc, #148]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003840:	4013      	ands	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	4b20      	ldr	r3, [pc, #128]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800384a:	430a      	orrs	r2, r1
 800384c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800384e:	2317      	movs	r3, #23
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d105      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003858:	4b1c      	ldr	r3, [pc, #112]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800385e:	4920      	ldr	r1, [pc, #128]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003860:	400a      	ands	r2, r1
 8003862:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b17      	ldr	r3, [pc, #92]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	2203      	movs	r2, #3
 8003874:	4393      	bics	r3, r2
 8003876:	0019      	movs	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800387e:	430a      	orrs	r2, r1
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	d009      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2210      	movs	r2, #16
 8003892:	4393      	bics	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4013      	ands	r3, r2
 80038aa:	d009      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2240      	movs	r2, #64	; 0x40
 80038b2:	4393      	bics	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	4b04      	ldr	r3, [pc, #16]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	0018      	movs	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	b006      	add	sp, #24
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40007000 	.word	0x40007000
 80038d4:	fffffcff 	.word	0xfffffcff
 80038d8:	fffeffff 	.word	0xfffeffff
 80038dc:	00001388 	.word	0x00001388
 80038e0:	efffffff 	.word	0xefffffff

080038e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e042      	b.n	800397c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	223d      	movs	r2, #61	; 0x3d
 80038fa:	5c9b      	ldrb	r3, [r3, r2]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	223c      	movs	r2, #60	; 0x3c
 8003906:	2100      	movs	r1, #0
 8003908:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	0018      	movs	r0, r3
 800390e:	f7fd fe0f 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	223d      	movs	r2, #61	; 0x3d
 8003916:	2102      	movs	r1, #2
 8003918:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3304      	adds	r3, #4
 8003922:	0019      	movs	r1, r3
 8003924:	0010      	movs	r0, r2
 8003926:	f000 fb7f 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2246      	movs	r2, #70	; 0x46
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223e      	movs	r2, #62	; 0x3e
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	223f      	movs	r2, #63	; 0x3f
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2240      	movs	r2, #64	; 0x40
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2241      	movs	r2, #65	; 0x41
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2242      	movs	r2, #66	; 0x42
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2243      	movs	r2, #67	; 0x43
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2244      	movs	r2, #68	; 0x44
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2245      	movs	r2, #69	; 0x45
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	223d      	movs	r2, #61	; 0x3d
 8003976:	2101      	movs	r1, #1
 8003978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e042      	b.n	8003a1c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223d      	movs	r2, #61	; 0x3d
 800399a:	5c9b      	ldrb	r3, [r3, r2]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	223c      	movs	r2, #60	; 0x3c
 80039a6:	2100      	movs	r1, #0
 80039a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 f839 	bl	8003a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	223d      	movs	r2, #61	; 0x3d
 80039b6:	2102      	movs	r1, #2
 80039b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3304      	adds	r3, #4
 80039c2:	0019      	movs	r1, r3
 80039c4:	0010      	movs	r0, r2
 80039c6:	f000 fb2f 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2246      	movs	r2, #70	; 0x46
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	223e      	movs	r2, #62	; 0x3e
 80039d6:	2101      	movs	r1, #1
 80039d8:	5499      	strb	r1, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2241      	movs	r2, #65	; 0x41
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2242      	movs	r2, #66	; 0x42
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2243      	movs	r2, #67	; 0x43
 80039fe:	2101      	movs	r1, #1
 8003a00:	5499      	strb	r1, [r3, r2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2244      	movs	r2, #68	; 0x44
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2245      	movs	r2, #69	; 0x45
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	223d      	movs	r2, #61	; 0x3d
 8003a16:	2101      	movs	r1, #1
 8003a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <HAL_TIM_PWM_Start+0x22>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	223e      	movs	r2, #62	; 0x3e
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	1e5a      	subs	r2, r3, #1
 8003a50:	4193      	sbcs	r3, r2
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	e01f      	b.n	8003a96 <HAL_TIM_PWM_Start+0x62>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d108      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x3a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	223f      	movs	r2, #63	; 0x3f
 8003a60:	5c9b      	ldrb	r3, [r3, r2]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	1e5a      	subs	r2, r3, #1
 8003a68:	4193      	sbcs	r3, r2
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	e013      	b.n	8003a96 <HAL_TIM_PWM_Start+0x62>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d108      	bne.n	8003a86 <HAL_TIM_PWM_Start+0x52>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2240      	movs	r2, #64	; 0x40
 8003a78:	5c9b      	ldrb	r3, [r3, r2]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	4193      	sbcs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	e007      	b.n	8003a96 <HAL_TIM_PWM_Start+0x62>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2241      	movs	r2, #65	; 0x41
 8003a8a:	5c9b      	ldrb	r3, [r3, r2]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	1e5a      	subs	r2, r3, #1
 8003a92:	4193      	sbcs	r3, r2
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e074      	b.n	8003b88 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0x7a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	223e      	movs	r2, #62	; 0x3e
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	5499      	strb	r1, [r3, r2]
 8003aac:	e013      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xa2>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0x8a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	223f      	movs	r2, #63	; 0x3f
 8003ab8:	2102      	movs	r1, #2
 8003aba:	5499      	strb	r1, [r3, r2]
 8003abc:	e00b      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xa2>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0x9a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	2102      	movs	r1, #2
 8003aca:	5499      	strb	r1, [r3, r2]
 8003acc:	e003      	b.n	8003ad6 <HAL_TIM_PWM_Start+0xa2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2241      	movs	r2, #65	; 0x41
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6839      	ldr	r1, [r7, #0]
 8003adc:	2201      	movs	r2, #1
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fdb8 	bl	8004654 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <HAL_TIM_PWM_Start+0x15c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00e      	beq.n	8003b0c <HAL_TIM_PWM_Start+0xd8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <HAL_TIM_PWM_Start+0x160>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_TIM_PWM_Start+0xd8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <HAL_TIM_PWM_Start+0x164>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_PWM_Start+0xd8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <HAL_TIM_PWM_Start+0x168>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_TIM_PWM_Start+0xdc>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_TIM_PWM_Start+0xde>
 8003b10:	2300      	movs	r3, #0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	0209      	lsls	r1, r1, #8
 8003b24:	430a      	orrs	r2, r1
 8003b26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <HAL_TIM_PWM_Start+0x15c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00f      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x11e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d009      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x11e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_TIM_PWM_Start+0x16c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_TIM_PWM_Start+0x11e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a11      	ldr	r2, [pc, #68]	; (8003b94 <HAL_TIM_PWM_Start+0x160>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d111      	bne.n	8003b76 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2207      	movs	r2, #7
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d010      	beq.n	8003b86 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	40000400 	.word	0x40000400

08003ba4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e090      	b.n	8003cda <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223d      	movs	r2, #61	; 0x3d
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	223c      	movs	r2, #60	; 0x3c
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fd fd64 	bl	800169c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	223d      	movs	r2, #61	; 0x3d
 8003bd8:	2102      	movs	r1, #2
 8003bda:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <HAL_TIM_Encoder_Init+0x140>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	0010      	movs	r0, r2
 8003bf8:	f000 fa16 	bl	8004028 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_TIM_Encoder_Init+0x144>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	4313      	orrs	r3, r2
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4a2c      	ldr	r2, [pc, #176]	; (8003cec <HAL_TIM_Encoder_Init+0x148>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	4a2b      	ldr	r2, [pc, #172]	; (8003cf0 <HAL_TIM_Encoder_Init+0x14c>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4313      	orrs	r3, r2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	011a      	lsls	r2, r3, #4
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	031b      	lsls	r3, r3, #12
 8003c66:	4313      	orrs	r3, r2
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2222      	movs	r2, #34	; 0x22
 8003c72:	4393      	bics	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2288      	movs	r2, #136	; 0x88
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2246      	movs	r2, #70	; 0x46
 8003cac:	2101      	movs	r1, #1
 8003cae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	223e      	movs	r2, #62	; 0x3e
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	223f      	movs	r2, #63	; 0x3f
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2242      	movs	r2, #66	; 0x42
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2243      	movs	r2, #67	; 0x43
 8003ccc:	2101      	movs	r1, #1
 8003cce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	223d      	movs	r2, #61	; 0x3d
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b006      	add	sp, #24
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	ffffbff8 	.word	0xffffbff8
 8003ce8:	fffffcfc 	.word	0xfffffcfc
 8003cec:	fffff3f3 	.word	0xfffff3f3
 8003cf0:	ffff0f0f 	.word	0xffff0f0f

08003cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d00:	2317      	movs	r3, #23
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	223c      	movs	r2, #60	; 0x3c
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0ad      	b.n	8003e72 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	223c      	movs	r2, #60	; 0x3c
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d100      	bne.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003d24:	e076      	b.n	8003e14 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d900      	bls.n	8003d2e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003d2c:	e095      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d04e      	beq.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d900      	bls.n	8003d3c <HAL_TIM_PWM_ConfigChannel+0x48>
 8003d3a:	e08e      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x166>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d021      	beq.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003d48:	e087      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 f9e8 	bl	8004128 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2108      	movs	r1, #8
 8003d64:	430a      	orrs	r2, r1
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2104      	movs	r1, #4
 8003d74:	438a      	bics	r2, r1
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
      break;
 8003d8a:	e06b      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 fa4f 	bl	8004238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0109      	lsls	r1, r1, #4
 8003da8:	430a      	orrs	r2, r1
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4931      	ldr	r1, [pc, #196]	; (8003e7c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]
      break;
 8003dd0:	e048      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 fab0 	bl	8004340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2108      	movs	r1, #8
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	69d9      	ldr	r1, [r3, #28]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	61da      	str	r2, [r3, #28]
      break;
 8003e12:	e027      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	0011      	movs	r1, r2
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f000 fb15 	bl	800444c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	0109      	lsls	r1, r1, #4
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	490f      	ldr	r1, [pc, #60]	; (8003e7c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003e40:	400a      	ands	r2, r1
 8003e42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69d9      	ldr	r1, [r3, #28]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
      break;
 8003e58:	e004      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003e5a:	2317      	movs	r3, #23
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	2201      	movs	r2, #1
 8003e60:	701a      	strb	r2, [r3, #0]
      break;
 8003e62:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	223c      	movs	r2, #60	; 0x3c
 8003e68:	2100      	movs	r1, #0
 8003e6a:	5499      	strb	r1, [r3, r2]

  return status;
 8003e6c:	2317      	movs	r3, #23
 8003e6e:	18fb      	adds	r3, r7, r3
 8003e70:	781b      	ldrb	r3, [r3, #0]
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b006      	add	sp, #24
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	fffffbff 	.word	0xfffffbff

08003e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8a:	230f      	movs	r3, #15
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223c      	movs	r2, #60	; 0x3c
 8003e96:	5c9b      	ldrb	r3, [r3, r2]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIM_ConfigClockSource+0x20>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e0bc      	b.n	800401a <HAL_TIM_ConfigClockSource+0x19a>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	223c      	movs	r2, #60	; 0x3c
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	223d      	movs	r2, #61	; 0x3d
 8003eac:	2102      	movs	r1, #2
 8003eae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2277      	movs	r2, #119	; 0x77
 8003ebc:	4393      	bics	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2280      	movs	r2, #128	; 0x80
 8003ed6:	0192      	lsls	r2, r2, #6
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0xde>
 8003edc:	2280      	movs	r2, #128	; 0x80
 8003ede:	0192      	lsls	r2, r2, #6
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d900      	bls.n	8003ee6 <HAL_TIM_ConfigClockSource+0x66>
 8003ee4:	e088      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	0152      	lsls	r2, r2, #5
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <HAL_TIM_ConfigClockSource+0x70>
 8003eee:	e088      	b.n	8004002 <HAL_TIM_ConfigClockSource+0x182>
 8003ef0:	2280      	movs	r2, #128	; 0x80
 8003ef2:	0152      	lsls	r2, r2, #5
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d900      	bls.n	8003efa <HAL_TIM_ConfigClockSource+0x7a>
 8003ef8:	e07e      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003efa:	2b70      	cmp	r3, #112	; 0x70
 8003efc:	d018      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xb0>
 8003efe:	d900      	bls.n	8003f02 <HAL_TIM_ConfigClockSource+0x82>
 8003f00:	e07a      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f02:	2b60      	cmp	r3, #96	; 0x60
 8003f04:	d04f      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x126>
 8003f06:	d900      	bls.n	8003f0a <HAL_TIM_ConfigClockSource+0x8a>
 8003f08:	e076      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f0a:	2b50      	cmp	r3, #80	; 0x50
 8003f0c:	d03b      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x106>
 8003f0e:	d900      	bls.n	8003f12 <HAL_TIM_ConfigClockSource+0x92>
 8003f10:	e072      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f12:	2b40      	cmp	r3, #64	; 0x40
 8003f14:	d057      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x146>
 8003f16:	d900      	bls.n	8003f1a <HAL_TIM_ConfigClockSource+0x9a>
 8003f18:	e06e      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f1a:	2b30      	cmp	r3, #48	; 0x30
 8003f1c:	d063      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x166>
 8003f1e:	d86b      	bhi.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	d060      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x166>
 8003f24:	d868      	bhi.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d05d      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x166>
 8003f2a:	2b10      	cmp	r3, #16
 8003f2c:	d05b      	beq.n	8003fe6 <HAL_TIM_ConfigClockSource+0x166>
 8003f2e:	e063      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6899      	ldr	r1, [r3, #8]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f000 fb68 	bl	8004614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2277      	movs	r2, #119	; 0x77
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	609a      	str	r2, [r3, #8]
      break;
 8003f5c:	e052      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6899      	ldr	r1, [r3, #8]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f000 fb51 	bl	8004614 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2180      	movs	r1, #128	; 0x80
 8003f7e:	01c9      	lsls	r1, r1, #7
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
      break;
 8003f84:	e03e      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	001a      	movs	r2, r3
 8003f94:	f000 fac4 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2150      	movs	r1, #80	; 0x50
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 fb1e 	bl	80045e0 <TIM_ITRx_SetConfig>
      break;
 8003fa4:	e02e      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	001a      	movs	r2, r3
 8003fb4:	f000 fae2 	bl	800457c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2160      	movs	r1, #96	; 0x60
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 fb0e 	bl	80045e0 <TIM_ITRx_SetConfig>
      break;
 8003fc4:	e01e      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6859      	ldr	r1, [r3, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	f000 faa4 	bl	8004520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f000 fafe 	bl	80045e0 <TIM_ITRx_SetConfig>
      break;
 8003fe4:	e00e      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	0019      	movs	r1, r3
 8003ff0:	0010      	movs	r0, r2
 8003ff2:	f000 faf5 	bl	80045e0 <TIM_ITRx_SetConfig>
      break;
 8003ff6:	e005      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ff8:	230f      	movs	r3, #15
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]
      break;
 8004000:	e000      	b.n	8004004 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004002:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	223d      	movs	r2, #61	; 0x3d
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	223c      	movs	r2, #60	; 0x3c
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]

  return status;
 8004014:	230f      	movs	r3, #15
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	781b      	ldrb	r3, [r3, #0]
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bd80      	pop	{r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	ffff00ff 	.word	0xffff00ff

08004028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <TIM_Base_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d008      	beq.n	8004052 <TIM_Base_SetConfig+0x2a>
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	2380      	movs	r3, #128	; 0x80
 8004044:	05db      	lsls	r3, r3, #23
 8004046:	429a      	cmp	r2, r3
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0x2a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a30      	ldr	r2, [pc, #192]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2270      	movs	r2, #112	; 0x70
 8004056:	4393      	bics	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a29      	ldr	r2, [pc, #164]	; (800410c <TIM_Base_SetConfig+0xe4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	2380      	movs	r3, #128	; 0x80
 8004070:	05db      	lsls	r3, r3, #23
 8004072:	429a      	cmp	r2, r3
 8004074:	d013      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a25      	ldr	r2, [pc, #148]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00f      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <TIM_Base_SetConfig+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a23      	ldr	r2, [pc, #140]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a22      	ldr	r2, [pc, #136]	; (800411c <TIM_Base_SetConfig+0xf4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a21      	ldr	r2, [pc, #132]	; (8004120 <TIM_Base_SetConfig+0xf8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a20      	ldr	r2, [pc, #128]	; (8004124 <TIM_Base_SetConfig+0xfc>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	4393      	bics	r3, r2
 80040b6:	001a      	movs	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <TIM_Base_SetConfig+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_Base_SetConfig+0xce>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0d      	ldr	r2, [pc, #52]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_Base_SetConfig+0xce>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0c      	ldr	r2, [pc, #48]	; (800411c <TIM_Base_SetConfig+0xf4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_Base_SetConfig+0xce>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a0b      	ldr	r2, [pc, #44]	; (8004120 <TIM_Base_SetConfig+0xf8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d103      	bne.n	80040fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	615a      	str	r2, [r3, #20]
}
 8004104:	46c0      	nop			; (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b004      	add	sp, #16
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40002000 	.word	0x40002000
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	fffffcff 	.word	0xfffffcff

08004128 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	2201      	movs	r2, #1
 8004138:	4393      	bics	r3, r2
 800413a:	001a      	movs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2270      	movs	r2, #112	; 0x70
 8004156:	4393      	bics	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2203      	movs	r2, #3
 800415e:	4393      	bics	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2202      	movs	r2, #2
 8004170:	4393      	bics	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a27      	ldr	r2, [pc, #156]	; (8004220 <TIM_OC1_SetConfig+0xf8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_OC1_SetConfig+0x76>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <TIM_OC1_SetConfig+0xfc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_OC1_SetConfig+0x76>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a25      	ldr	r2, [pc, #148]	; (8004228 <TIM_OC1_SetConfig+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_OC1_SetConfig+0x76>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a24      	ldr	r2, [pc, #144]	; (800422c <TIM_OC1_SetConfig+0x104>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d10c      	bne.n	80041b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2208      	movs	r2, #8
 80041a2:	4393      	bics	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2204      	movs	r2, #4
 80041b4:	4393      	bics	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <TIM_OC1_SetConfig+0xf8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00b      	beq.n	80041d8 <TIM_OC1_SetConfig+0xb0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <TIM_OC1_SetConfig+0xfc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d007      	beq.n	80041d8 <TIM_OC1_SetConfig+0xb0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <TIM_OC1_SetConfig+0x100>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d003      	beq.n	80041d8 <TIM_OC1_SetConfig+0xb0>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <TIM_OC1_SetConfig+0x104>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d111      	bne.n	80041fc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <TIM_OC1_SetConfig+0x108>)
 80041dc:	4013      	ands	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4a14      	ldr	r2, [pc, #80]	; (8004234 <TIM_OC1_SetConfig+0x10c>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	621a      	str	r2, [r3, #32]
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b006      	add	sp, #24
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40014000 	.word	0x40014000
 8004228:	40014400 	.word	0x40014400
 800422c:	40014800 	.word	0x40014800
 8004230:	fffffeff 	.word	0xfffffeff
 8004234:	fffffdff 	.word	0xfffffdff

08004238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	2210      	movs	r2, #16
 8004248:	4393      	bics	r3, r2
 800424a:	001a      	movs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a2e      	ldr	r2, [pc, #184]	; (8004320 <TIM_OC2_SetConfig+0xe8>)
 8004266:	4013      	ands	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a2d      	ldr	r2, [pc, #180]	; (8004324 <TIM_OC2_SetConfig+0xec>)
 800426e:	4013      	ands	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2220      	movs	r2, #32
 8004282:	4393      	bics	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a24      	ldr	r2, [pc, #144]	; (8004328 <TIM_OC2_SetConfig+0xf0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10d      	bne.n	80042b6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	4393      	bics	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	4393      	bics	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a1b      	ldr	r2, [pc, #108]	; (8004328 <TIM_OC2_SetConfig+0xf0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_OC2_SetConfig+0x9e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1a      	ldr	r2, [pc, #104]	; (800432c <TIM_OC2_SetConfig+0xf4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_OC2_SetConfig+0x9e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a19      	ldr	r2, [pc, #100]	; (8004330 <TIM_OC2_SetConfig+0xf8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_OC2_SetConfig+0x9e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <TIM_OC2_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d113      	bne.n	80042fe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <TIM_OC2_SetConfig+0x100>)
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <TIM_OC2_SetConfig+0x104>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	ffff8fff 	.word	0xffff8fff
 8004324:	fffffcff 	.word	0xfffffcff
 8004328:	40012c00 	.word	0x40012c00
 800432c:	40014000 	.word	0x40014000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	fffffbff 	.word	0xfffffbff
 800433c:	fffff7ff 	.word	0xfffff7ff

08004340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4a35      	ldr	r2, [pc, #212]	; (8004424 <TIM_OC3_SetConfig+0xe4>)
 8004350:	401a      	ands	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2270      	movs	r2, #112	; 0x70
 800436c:	4393      	bics	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2203      	movs	r2, #3
 8004374:	4393      	bics	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <TIM_OC3_SetConfig+0xe8>)
 8004386:	4013      	ands	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a24      	ldr	r2, [pc, #144]	; (800442c <TIM_OC3_SetConfig+0xec>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10d      	bne.n	80043ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	4a23      	ldr	r2, [pc, #140]	; (8004430 <TIM_OC3_SetConfig+0xf0>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	021b      	lsls	r3, r3, #8
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	; (8004434 <TIM_OC3_SetConfig+0xf4>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	; (800442c <TIM_OC3_SetConfig+0xec>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_OC3_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <TIM_OC3_SetConfig+0xf8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_OC3_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <TIM_OC3_SetConfig+0xfc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_OC3_SetConfig+0x9a>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	; (8004440 <TIM_OC3_SetConfig+0x100>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d113      	bne.n	8004402 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <TIM_OC3_SetConfig+0x104>)
 80043de:	4013      	ands	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <TIM_OC3_SetConfig+0x108>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b006      	add	sp, #24
 8004422:	bd80      	pop	{r7, pc}
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	fffffdff 	.word	0xfffffdff
 800442c:	40012c00 	.word	0x40012c00
 8004430:	fffff7ff 	.word	0xfffff7ff
 8004434:	fffffbff 	.word	0xfffffbff
 8004438:	40014000 	.word	0x40014000
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800
 8004444:	ffffefff 	.word	0xffffefff
 8004448:	ffffdfff 	.word	0xffffdfff

0800444c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4a28      	ldr	r2, [pc, #160]	; (80044fc <TIM_OC4_SetConfig+0xb0>)
 800445c:	401a      	ands	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a22      	ldr	r2, [pc, #136]	; (8004500 <TIM_OC4_SetConfig+0xb4>)
 8004478:	4013      	ands	r3, r2
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4a21      	ldr	r2, [pc, #132]	; (8004504 <TIM_OC4_SetConfig+0xb8>)
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4313      	orrs	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <TIM_OC4_SetConfig+0xbc>)
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	031b      	lsls	r3, r3, #12
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a19      	ldr	r2, [pc, #100]	; (800450c <TIM_OC4_SetConfig+0xc0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_OC4_SetConfig+0x78>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <TIM_OC4_SetConfig+0xc4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_OC4_SetConfig+0x78>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <TIM_OC4_SetConfig+0xc8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC4_SetConfig+0x78>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a16      	ldr	r2, [pc, #88]	; (8004518 <TIM_OC4_SetConfig+0xcc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d109      	bne.n	80044d8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	4a15      	ldr	r2, [pc, #84]	; (800451c <TIM_OC4_SetConfig+0xd0>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	019b      	lsls	r3, r3, #6
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b006      	add	sp, #24
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	ffffefff 	.word	0xffffefff
 8004500:	ffff8fff 	.word	0xffff8fff
 8004504:	fffffcff 	.word	0xfffffcff
 8004508:	ffffdfff 	.word	0xffffdfff
 800450c:	40012c00 	.word	0x40012c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	ffffbfff 	.word	0xffffbfff

08004520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	2201      	movs	r2, #1
 8004538:	4393      	bics	r3, r2
 800453a:	001a      	movs	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	22f0      	movs	r2, #240	; 0xf0
 800454a:	4393      	bics	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	220a      	movs	r2, #10
 800455c:	4393      	bics	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4313      	orrs	r3, r2
 8004566:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	46c0      	nop			; (mov r8, r8)
 8004576:	46bd      	mov	sp, r7
 8004578:	b006      	add	sp, #24
 800457a:	bd80      	pop	{r7, pc}

0800457c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	2210      	movs	r2, #16
 800458e:	4393      	bics	r3, r2
 8004590:	001a      	movs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <TIM_TI2_ConfigInputStage+0x60>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	22a0      	movs	r2, #160	; 0xa0
 80045b8:	4393      	bics	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b006      	add	sp, #24
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	ffff0fff 	.word	0xffff0fff

080045e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2270      	movs	r2, #112	; 0x70
 80045f4:	4393      	bics	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	2207      	movs	r2, #7
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	609a      	str	r2, [r3, #8]
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <TIM_ETR_SetConfig+0x3c>)
 800462c:	4013      	ands	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	021a      	lsls	r2, r3, #8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	431a      	orrs	r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b006      	add	sp, #24
 800464e:	bd80      	pop	{r7, pc}
 8004650:	ffff00ff 	.word	0xffff00ff

08004654 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	221f      	movs	r2, #31
 8004664:	4013      	ands	r3, r2
 8004666:	2201      	movs	r2, #1
 8004668:	409a      	lsls	r2, r3
 800466a:	0013      	movs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	43d2      	mvns	r2, r2
 8004676:	401a      	ands	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	211f      	movs	r1, #31
 8004684:	400b      	ands	r3, r1
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4099      	lsls	r1, r3
 800468a:	000b      	movs	r3, r1
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]
}
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	46bd      	mov	sp, r7
 8004696:	b006      	add	sp, #24
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	223c      	movs	r2, #60	; 0x3c
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d101      	bne.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e047      	b.n	8004744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	223c      	movs	r2, #60	; 0x3c
 80046b8:	2101      	movs	r1, #1
 80046ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	223d      	movs	r2, #61	; 0x3d
 80046c0:	2102      	movs	r1, #2
 80046c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2270      	movs	r2, #112	; 0x70
 80046d8:	4393      	bics	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00f      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	429a      	cmp	r2, r3
 8004702:	d009      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a11      	ldr	r2, [pc, #68]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a10      	ldr	r2, [pc, #64]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d10c      	bne.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	4393      	bics	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	223d      	movs	r2, #61	; 0x3d
 8004736:	2101      	movs	r1, #1
 8004738:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	223c      	movs	r2, #60	; 0x3c
 800473e:	2100      	movs	r1, #0
 8004740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	0018      	movs	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	b004      	add	sp, #16
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40012c00 	.word	0x40012c00
 8004750:	40000400 	.word	0x40000400
 8004754:	40014000 	.word	0x40014000

08004758 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	223c      	movs	r2, #60	; 0x3c
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004770:	2302      	movs	r3, #2
 8004772:	e03e      	b.n	80047f2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	223c      	movs	r2, #60	; 0x3c
 8004778:	2101      	movs	r1, #1
 800477a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	22ff      	movs	r2, #255	; 0xff
 8004780:	4393      	bics	r3, r2
 8004782:	001a      	movs	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004790:	401a      	ands	r2, r3
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a18      	ldr	r2, [pc, #96]	; (8004800 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800479e:	401a      	ands	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a16      	ldr	r2, [pc, #88]	; (8004804 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80047ac:	401a      	ands	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4a13      	ldr	r2, [pc, #76]	; (8004808 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80047ba:	401a      	ands	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a11      	ldr	r2, [pc, #68]	; (800480c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80047c8:	401a      	ands	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80047d6:	401a      	ands	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	223c      	movs	r2, #60	; 0x3c
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	0018      	movs	r0, r3
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b004      	add	sp, #16
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	fffffcff 	.word	0xfffffcff
 8004800:	fffffbff 	.word	0xfffffbff
 8004804:	fffff7ff 	.word	0xfffff7ff
 8004808:	ffffefff 	.word	0xffffefff
 800480c:	ffffdfff 	.word	0xffffdfff
 8004810:	ffffbfff 	.word	0xffffbfff

08004814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e044      	b.n	80048b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2274      	movs	r2, #116	; 0x74
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fd f915 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2224      	movs	r2, #36	; 0x24
 8004842:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2101      	movs	r1, #1
 8004850:	438a      	bics	r2, r1
 8004852:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	0018      	movs	r0, r3
 8004858:	f000 f8da 	bl	8004a10 <UART_SetConfig>
 800485c:	0003      	movs	r3, r0
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e024      	b.n	80048b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0018      	movs	r0, r3
 8004872:	f000 fa0d 	bl	8004c90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	490d      	ldr	r1, [pc, #52]	; (80048b8 <HAL_UART_Init+0xa4>)
 8004882:	400a      	ands	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	212a      	movs	r1, #42	; 0x2a
 8004892:	438a      	bics	r2, r1
 8004894:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	430a      	orrs	r2, r1
 80048a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 faa5 	bl	8004df8 <UART_CheckIdleState>
 80048ae:	0003      	movs	r3, r0
}
 80048b0:	0018      	movs	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	ffffb7ff 	.word	0xffffb7ff

080048bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	1dbb      	adds	r3, r7, #6
 80048ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d0:	2b20      	cmp	r3, #32
 80048d2:	d000      	beq.n	80048d6 <HAL_UART_Transmit+0x1a>
 80048d4:	e096      	b.n	8004a04 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_UART_Transmit+0x28>
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e08e      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	015b      	lsls	r3, r3, #5
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d109      	bne.n	8004908 <HAL_UART_Transmit+0x4c>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2201      	movs	r2, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d001      	beq.n	8004908 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e07e      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2274      	movs	r2, #116	; 0x74
 800490c:	5c9b      	ldrb	r3, [r3, r2]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x5a>
 8004912:	2302      	movs	r3, #2
 8004914:	e077      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2274      	movs	r2, #116	; 0x74
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	2100      	movs	r1, #0
 8004924:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492c:	f7fd f96c 	bl	8001c08 <HAL_GetTick>
 8004930:	0003      	movs	r3, r0
 8004932:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1dba      	adds	r2, r7, #6
 8004938:	2150      	movs	r1, #80	; 0x50
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1dba      	adds	r2, r7, #6
 8004942:	2152      	movs	r1, #82	; 0x52
 8004944:	8812      	ldrh	r2, [r2, #0]
 8004946:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	015b      	lsls	r3, r3, #5
 8004950:	429a      	cmp	r2, r3
 8004952:	d108      	bne.n	8004966 <HAL_UART_Transmit+0xaa>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800495c:	2300      	movs	r3, #0
 800495e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	e003      	b.n	800496e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2274      	movs	r2, #116	; 0x74
 8004972:	2100      	movs	r1, #0
 8004974:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004976:	e02d      	b.n	80049d4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	0013      	movs	r3, r2
 8004982:	2200      	movs	r2, #0
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	f000 fa7f 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 800498a:	1e03      	subs	r3, r0, #0
 800498c:	d001      	beq.n	8004992 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e039      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	881a      	ldrh	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	05d2      	lsls	r2, r2, #23
 80049a2:	0dd2      	lsrs	r2, r2, #23
 80049a4:	b292      	uxth	r2, r2
 80049a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3302      	adds	r3, #2
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	e008      	b.n	80049c2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	781a      	ldrb	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b292      	uxth	r2, r2
 80049ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2252      	movs	r2, #82	; 0x52
 80049c6:	5a9b      	ldrh	r3, [r3, r2]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b299      	uxth	r1, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2252      	movs	r2, #82	; 0x52
 80049d2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2252      	movs	r2, #82	; 0x52
 80049d8:	5a9b      	ldrh	r3, [r3, r2]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1cb      	bne.n	8004978 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	0013      	movs	r3, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	2140      	movs	r1, #64	; 0x40
 80049ee:	f000 fa4b 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 80049f2:	1e03      	subs	r3, r0, #0
 80049f4:	d001      	beq.n	80049fa <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e005      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004a04:	2302      	movs	r3, #2
  }
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b008      	add	sp, #32
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a18:	231e      	movs	r3, #30
 8004a1a:	18fb      	adds	r3, r7, r3
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a8d      	ldr	r2, [pc, #564]	; (8004c74 <UART_SetConfig+0x264>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	0019      	movs	r1, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	4a88      	ldr	r2, [pc, #544]	; (8004c78 <UART_SetConfig+0x268>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	0019      	movs	r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a7f      	ldr	r2, [pc, #508]	; (8004c7c <UART_SetConfig+0x26c>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a7b      	ldr	r2, [pc, #492]	; (8004c80 <UART_SetConfig+0x270>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d127      	bne.n	8004ae6 <UART_SetConfig+0xd6>
 8004a96:	4b7b      	ldr	r3, [pc, #492]	; (8004c84 <UART_SetConfig+0x274>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d00d      	beq.n	8004abe <UART_SetConfig+0xae>
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0xcc>
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d014      	beq.n	8004ad2 <UART_SetConfig+0xc2>
 8004aa8:	d818      	bhi.n	8004adc <UART_SetConfig+0xcc>
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <UART_SetConfig+0xa4>
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d00a      	beq.n	8004ac8 <UART_SetConfig+0xb8>
 8004ab2:	e013      	b.n	8004adc <UART_SetConfig+0xcc>
 8004ab4:	231f      	movs	r3, #31
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	2200      	movs	r2, #0
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e021      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004abe:	231f      	movs	r3, #31
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e01c      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004ac8:	231f      	movs	r3, #31
 8004aca:	18fb      	adds	r3, r7, r3
 8004acc:	2204      	movs	r2, #4
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	e017      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004ad2:	231f      	movs	r3, #31
 8004ad4:	18fb      	adds	r3, r7, r3
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e012      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004adc:	231f      	movs	r3, #31
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	e00d      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a67      	ldr	r2, [pc, #412]	; (8004c88 <UART_SetConfig+0x278>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d104      	bne.n	8004afa <UART_SetConfig+0xea>
 8004af0:	231f      	movs	r3, #31
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e003      	b.n	8004b02 <UART_SetConfig+0xf2>
 8004afa:	231f      	movs	r3, #31
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	2210      	movs	r2, #16
 8004b00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d15d      	bne.n	8004bca <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004b0e:	231f      	movs	r3, #31
 8004b10:	18fb      	adds	r3, r7, r3
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d015      	beq.n	8004b44 <UART_SetConfig+0x134>
 8004b18:	dc18      	bgt.n	8004b4c <UART_SetConfig+0x13c>
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d00d      	beq.n	8004b3a <UART_SetConfig+0x12a>
 8004b1e:	dc15      	bgt.n	8004b4c <UART_SetConfig+0x13c>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <UART_SetConfig+0x11a>
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d005      	beq.n	8004b34 <UART_SetConfig+0x124>
 8004b28:	e010      	b.n	8004b4c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b2a:	f7fe fde7 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	61bb      	str	r3, [r7, #24]
        break;
 8004b32:	e012      	b.n	8004b5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b34:	4b55      	ldr	r3, [pc, #340]	; (8004c8c <UART_SetConfig+0x27c>)
 8004b36:	61bb      	str	r3, [r7, #24]
        break;
 8004b38:	e00f      	b.n	8004b5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b3a:	f7fe fd71 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	61bb      	str	r3, [r7, #24]
        break;
 8004b42:	e00a      	b.n	8004b5a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	61bb      	str	r3, [r7, #24]
        break;
 8004b4a:	e006      	b.n	8004b5a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b50:	231e      	movs	r3, #30
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
        break;
 8004b58:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d100      	bne.n	8004b62 <UART_SetConfig+0x152>
 8004b60:	e07b      	b.n	8004c5a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	005a      	lsls	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	18d2      	adds	r2, r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	0019      	movs	r1, r3
 8004b74:	0010      	movs	r0, r2
 8004b76:	f7fb fac7 	bl	8000108 <__udivsi3>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d91c      	bls.n	8004bc0 <UART_SetConfig+0x1b0>
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	025b      	lsls	r3, r3, #9
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d217      	bcs.n	8004bc0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	200e      	movs	r0, #14
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	210f      	movs	r1, #15
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b299      	uxth	r1, r3
 8004baa:	183b      	adds	r3, r7, r0
 8004bac:	183a      	adds	r2, r7, r0
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	183a      	adds	r2, r7, r0
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	e04c      	b.n	8004c5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc0:	231e      	movs	r3, #30
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e047      	b.n	8004c5a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bca:	231f      	movs	r3, #31
 8004bcc:	18fb      	adds	r3, r7, r3
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d015      	beq.n	8004c00 <UART_SetConfig+0x1f0>
 8004bd4:	dc18      	bgt.n	8004c08 <UART_SetConfig+0x1f8>
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d00d      	beq.n	8004bf6 <UART_SetConfig+0x1e6>
 8004bda:	dc15      	bgt.n	8004c08 <UART_SetConfig+0x1f8>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <UART_SetConfig+0x1d6>
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d005      	beq.n	8004bf0 <UART_SetConfig+0x1e0>
 8004be4:	e010      	b.n	8004c08 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be6:	f7fe fd89 	bl	80036fc <HAL_RCC_GetPCLK1Freq>
 8004bea:	0003      	movs	r3, r0
 8004bec:	61bb      	str	r3, [r7, #24]
        break;
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <UART_SetConfig+0x27c>)
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e00f      	b.n	8004c16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7fe fd13 	bl	8003620 <HAL_RCC_GetSysClockFreq>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	61bb      	str	r3, [r7, #24]
        break;
 8004bfe:	e00a      	b.n	8004c16 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	61bb      	str	r3, [r7, #24]
        break;
 8004c06:	e006      	b.n	8004c16 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0c:	231e      	movs	r3, #30
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
        break;
 8004c14:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01e      	beq.n	8004c5a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085a      	lsrs	r2, r3, #1
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	18d2      	adds	r2, r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	0010      	movs	r0, r2
 8004c2e:	f7fb fa6b 	bl	8000108 <__udivsi3>
 8004c32:	0003      	movs	r3, r0
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b0f      	cmp	r3, #15
 8004c3c:	d909      	bls.n	8004c52 <UART_SetConfig+0x242>
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	025b      	lsls	r3, r3, #9
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d204      	bcs.n	8004c52 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	60da      	str	r2, [r3, #12]
 8004c50:	e003      	b.n	8004c5a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c52:	231e      	movs	r3, #30
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c66:	231e      	movs	r3, #30
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	781b      	ldrb	r3, [r3, #0]
}
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b008      	add	sp, #32
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	ffff69f3 	.word	0xffff69f3
 8004c78:	ffffcfff 	.word	0xffffcfff
 8004c7c:	fffff4ff 	.word	0xfffff4ff
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a4a      	ldr	r2, [pc, #296]	; (8004dd4 <UART_AdvFeatureConfig+0x144>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4a43      	ldr	r2, [pc, #268]	; (8004dd8 <UART_AdvFeatureConfig+0x148>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <UART_AdvFeatureConfig+0x14c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	2208      	movs	r2, #8
 8004d04:	4013      	ands	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <UART_AdvFeatureConfig+0x150>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	0019      	movs	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2210      	movs	r2, #16
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	; (8004de4 <UART_AdvFeatureConfig+0x154>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2220      	movs	r2, #32
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <UART_AdvFeatureConfig+0x158>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2240      	movs	r2, #64	; 0x40
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <UART_AdvFeatureConfig+0x15c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	035b      	lsls	r3, r3, #13
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d10b      	bne.n	8004daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <UART_AdvFeatureConfig+0x160>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2280      	movs	r2, #128	; 0x80
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <UART_AdvFeatureConfig+0x164>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	fffdffff 	.word	0xfffdffff
 8004dd8:	fffeffff 	.word	0xfffeffff
 8004ddc:	fffbffff 	.word	0xfffbffff
 8004de0:	ffff7fff 	.word	0xffff7fff
 8004de4:	ffffefff 	.word	0xffffefff
 8004de8:	ffffdfff 	.word	0xffffdfff
 8004dec:	ffefffff 	.word	0xffefffff
 8004df0:	ff9fffff 	.word	0xff9fffff
 8004df4:	fff7ffff 	.word	0xfff7ffff

08004df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	2100      	movs	r1, #0
 8004e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e08:	f7fc fefe 	bl	8001c08 <HAL_GetTick>
 8004e0c:	0003      	movs	r3, r0
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2208      	movs	r2, #8
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d10c      	bne.n	8004e38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	0391      	lsls	r1, r2, #14
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <UART_CheckIdleState+0x8c>)
 8004e28:	9200      	str	r2, [sp, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f000 f82c 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004e30:	1e03      	subs	r3, r0, #0
 8004e32:	d001      	beq.n	8004e38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e021      	b.n	8004e7c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d10c      	bne.n	8004e60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	03d1      	lsls	r1, r2, #15
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <UART_CheckIdleState+0x8c>)
 8004e50:	9200      	str	r2, [sp, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f000 f818 	bl	8004e88 <UART_WaitOnFlagUntilTimeout>
 8004e58:	1e03      	subs	r3, r0, #0
 8004e5a:	d001      	beq.n	8004e60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e00d      	b.n	8004e7c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2274      	movs	r2, #116	; 0x74
 8004e76:	2100      	movs	r1, #0
 8004e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b004      	add	sp, #16
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	01ffffff 	.word	0x01ffffff

08004e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b094      	sub	sp, #80	; 0x50
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	e0a3      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	d100      	bne.n	8004ea2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004ea0:	e09f      	b.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fc feb1 	bl	8001c08 <HAL_GetTick>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d13d      	bne.n	8004f34 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	494c      	ldr	r1, [pc, #304]	; (800500c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eea:	f3ef 8310 	mrs	r3, PRIMASK
 8004eee:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2274      	movs	r2, #116	; 0x74
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e067      	b.n	8005004 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d050      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d146      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f62:	613b      	str	r3, [r7, #16]
  return(result);
 8004f64:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f383 8810 	msr	PRIMASK, r3
}
 8004f72:	46c0      	nop			; (mov r8, r8)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4923      	ldr	r1, [pc, #140]	; (800500c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f80:	400a      	ands	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f90:	f3ef 8310 	mrs	r3, PRIMASK
 8004f94:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f96:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	f383 8810 	msr	PRIMASK, r3
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	438a      	bics	r2, r1
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2280      	movs	r2, #128	; 0x80
 8004fd2:	2120      	movs	r1, #32
 8004fd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2274      	movs	r2, #116	; 0x74
 8004fda:	2100      	movs	r1, #0
 8004fdc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e010      	b.n	8005004 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	425a      	negs	r2, r3
 8004ff2:	4153      	adcs	r3, r2
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d100      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005000:	e74b      	b.n	8004e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b014      	add	sp, #80	; 0x50
 800500a:	bd80      	pop	{r7, pc}
 800500c:	fffffe5f 	.word	0xfffffe5f

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	2600      	movs	r6, #0
 8005014:	4d0c      	ldr	r5, [pc, #48]	; (8005048 <__libc_init_array+0x38>)
 8005016:	4c0d      	ldr	r4, [pc, #52]	; (800504c <__libc_init_array+0x3c>)
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	42a6      	cmp	r6, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	2600      	movs	r6, #0
 8005022:	f000 f821 	bl	8005068 <_init>
 8005026:	4d0a      	ldr	r5, [pc, #40]	; (8005050 <__libc_init_array+0x40>)
 8005028:	4c0a      	ldr	r4, [pc, #40]	; (8005054 <__libc_init_array+0x44>)
 800502a:	1b64      	subs	r4, r4, r5
 800502c:	10a4      	asrs	r4, r4, #2
 800502e:	42a6      	cmp	r6, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	00b3      	lsls	r3, r6, #2
 8005036:	58eb      	ldr	r3, [r5, r3]
 8005038:	4798      	blx	r3
 800503a:	3601      	adds	r6, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	00b3      	lsls	r3, r6, #2
 8005040:	58eb      	ldr	r3, [r5, r3]
 8005042:	4798      	blx	r3
 8005044:	3601      	adds	r6, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	080050cc 	.word	0x080050cc
 800504c:	080050cc 	.word	0x080050cc
 8005050:	080050cc 	.word	0x080050cc
 8005054:	080050d0 	.word	0x080050d0

08005058 <memset>:
 8005058:	0003      	movs	r3, r0
 800505a:	1882      	adds	r2, r0, r2
 800505c:	4293      	cmp	r3, r2
 800505e:	d100      	bne.n	8005062 <memset+0xa>
 8005060:	4770      	bx	lr
 8005062:	7019      	strb	r1, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	e7f9      	b.n	800505c <memset+0x4>

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
